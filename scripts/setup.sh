#!/bin/bash

# ===========================================
# Script de configuration AIMarkets
# ===========================================
# Ce script configure l'environnement et initialise la base de donn√©es

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rifier si Docker est install√©
check_docker() {
    if ! command -v docker &> /dev/null; then
        print_error "Docker n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
    
    print_success "Docker et Docker Compose sont install√©s"
}

# Cr√©er le fichier .env s'il n'existe pas
create_env_file() {
    if [ ! -f .env ]; then
        print_message "Cr√©ation du fichier .env..."
        cp env.example .env
        print_success "Fichier .env cr√©√©. Veuillez le modifier selon vos besoins."
        print_warning "IMPORTANT: Modifiez les mots de passe dans le fichier .env avant de continuer!"
        read -p "Appuyez sur Entr√©e une fois que vous avez modifi√© le fichier .env..."
    else
        print_success "Fichier .env existe d√©j√†"
    fi
}

# D√©marrer les services Docker
start_services() {
    print_message "D√©marrage des services Docker..."
    docker-compose up -d postgres redis
    print_success "Services PostgreSQL et Redis d√©marr√©s"
    
    # Attendre que PostgreSQL soit pr√™t
    print_message "Attente que PostgreSQL soit pr√™t..."
    sleep 10
    
    # V√©rifier la connexion √† PostgreSQL
    if docker-compose exec -T postgres pg_isready -U aimarkets_user -d aimarkets; then
        print_success "PostgreSQL est pr√™t"
    else
        print_error "PostgreSQL n'est pas accessible"
        exit 1
    fi
}

# Initialiser la base de donn√©es
init_database() {
    print_message "Initialisation de la base de donn√©es..."
    
    # Cr√©er la base de donn√©es
    docker-compose exec -T postgres psql -U aimarkets_user -d postgres -c "CREATE DATABASE IF NOT EXISTS aimarkets;" || true
    
    # Ex√©cuter le script d'initialisation
    docker-compose exec -T postgres psql -U aimarkets_user -d aimarkets -f /docker-entrypoint-initdb.d/init.sql
    
    print_success "Base de donn√©es initialis√©e"
}

# Ing√©rer les donn√©es
ingest_data() {
    print_message "Ingestion des donn√©es..."
    
    # Copier les fichiers de donn√©es dans le conteneur
    docker cp historical_data.csv aimarkets_backend:/app/data/
    docker cp historcial_sentiment.csv aimarkets_backend:/app/data/
    
    # Ex√©cuter le script d'ingestion
    docker-compose exec backend python scripts/data_ingestion.py ingest-all
    
    print_success "Donn√©es ing√©r√©es"
}

# D√©marrer l'application compl√®te
start_application() {
    print_message "D√©marrage de l'application compl√®te..."
    docker-compose up -d
    print_success "Application d√©marr√©e"
}

# Afficher les informations de connexion
show_connection_info() {
    echo ""
    echo "==========================================="
    echo "üéâ AIMarkets est maintenant configur√© !"
    echo "==========================================="
    echo ""
    echo "üìä Acc√®s aux services:"
    echo "  - Frontend: http://localhost:3000"
    echo "  - Backend API: http://localhost:8000"
    echo "  - Documentation API: http://localhost:8000/docs"
    echo "  - PostgreSQL: localhost:5432"
    echo "  - Redis: localhost:6379"
    echo ""
    echo "üîß Commandes utiles:"
    echo "  - Voir les logs: docker-compose logs -f"
    echo "  - Arr√™ter: docker-compose down"
    echo "  - Red√©marrer: docker-compose restart"
    echo ""
    echo "üìö Documentation:"
    echo "  - README.md pour plus d'informations"
    echo "  - PROJECT_PLAN.md pour le plan de d√©veloppement"
    echo ""
}

# Fonction principale
main() {
    echo "==========================================="
    echo "üöÄ Configuration AIMarkets"
    echo "==========================================="
    echo ""
    
    # V√©rifications pr√©alables
    check_docker
    
    # Configuration
    create_env_file
    
    # D√©marrage des services
    start_services
    
    # Initialisation de la base de donn√©es
    init_database
    
    # Ingestion des donn√©es
    ingest_data
    
    # D√©marrage de l'application
    start_application
    
    # Informations finales
    show_connection_info
}

# Gestion des arguments
case "${1:-}" in
    "check")
        check_docker
        ;;
    "env")
        create_env_file
        ;;
    "start")
        start_services
        ;;
    "init-db")
        init_database
        ;;
    "ingest")
        ingest_data
        ;;
    "full")
        main
        ;;
    *)
        echo "Usage: $0 {check|env|start|init-db|ingest|full}"
        echo ""
        echo "Commandes:"
        echo "  check     - V√©rifier les pr√©requis"
        echo "  env       - Cr√©er le fichier .env"
        echo "  start     - D√©marrer les services de base"
        echo "  init-db   - Initialiser la base de donn√©es"
        echo "  ingest    - Ing√©rer les donn√©es"
        echo "  full      - Configuration compl√®te (recommand√©)"
        echo ""
        exit 1
        ;;
esac
