#!/usr/bin/env python3
"""
Script de test pour les signaux avanc√©s.

Ce script teste le syst√®me de signaux avanc√©s en g√©n√©rant des signaux
pour diff√©rents symboles et en validant leur fonctionnement.
"""

import os
import sys
import pandas as pd
from datetime import datetime, timedelta
import requests
import json
from typing import Any

# Ajouter le chemin du backend
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import get_db
from app.services.polygon_service import PolygonService
from app.services.advanced_signal_service import AdvancedSignalService
from app.services.technical_analysis.advanced_signals import AdvancedSignalGenerator

class AdvancedSignalsTester:
    """Classe pour tester les signaux avanc√©s."""
    
    def __init__(self, symbol: str = "AAPL"):
        self.symbol = symbol
        self.test_results = {
            "symbol": symbol,
            "test_timestamp": datetime.now().isoformat(),
            "tests_performed": {},
            "summary": {
                "total_tests": 0,
                "passed_tests": 0,
                "failed_tests": 0,
                "success_rate": 0.0,
                "errors": []
            }
        }
    
    def _record_test_result(self, test_name: str, success: bool, result: Any = None, error: Any = None):
        """Enregistre le r√©sultat d'un test."""
        self.test_results["tests_performed"][test_name] = {
            "success": success,
            "timestamp": datetime.now().isoformat(),
            "result": result,
            "error": str(error) if error else None
        }
        self.test_results["summary"]["total_tests"] += 1
        if success:
            self.test_results["summary"]["passed_tests"] += 1
        else:
            self.test_results["summary"]["failed_tests"] += 1
            if error:
                self.test_results["summary"]["errors"].append(f"{test_name}: {str(error)}")
    
    def get_historical_data(self, period_days=252):
        """R√©cup√®re les donn√©es historiques pour le symbole."""
        try:
            polygon_service = PolygonService()
            
            end_date = datetime.now()
            start_date = end_date - timedelta(days=period_days + 50)
            
            historical_data = polygon_service.get_historical_data(
                symbol=self.symbol,
                from_date=start_date.strftime('%Y-%m-%d'),
                to_date=end_date.strftime('%Y-%m-%d')
            )
            
            if not historical_data:
                raise ValueError(f"Aucune donn√©e historique trouv√©e pour {self.symbol}")
            
            # Convertir en DataFrame
            df = pd.DataFrame(historical_data)
            df['date'] = pd.to_datetime(df['date'])
            df.set_index('date', inplace=True)
            
            return df
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es: {e}")
            return None
    
    def test_signal_generator(self):
        """Teste le g√©n√©rateur de signaux avanc√©s."""
        try:
            print(f"üîß Test du g√©n√©rateur de signaux pour {self.symbol}...")
            
            # R√©cup√©rer les donn√©es
            df = self.get_historical_data()
            if df is None:
                raise ValueError("Impossible de r√©cup√©rer les donn√©es historiques")
            
            # Pr√©parer les donn√©es
            high = df['high']
            low = df['low']
            close = df['close']
            open_prices = df['open']
            volume = df['volume'] if 'volume' in df.columns else None
            
            # Cr√©er le g√©n√©rateur
            generator = AdvancedSignalGenerator()
            
            # G√©n√©rer un signal
            signal_result = generator.generate_advanced_signal(
                symbol=self.symbol,
                high=high,
                low=low,
                close=close,
                open_prices=open_prices,
                volume=volume
            )
            
            # Valider le r√©sultat
            if signal_result is None:
                raise ValueError("Le g√©n√©rateur a retourn√© None")
            
            if not hasattr(signal_result, 'signal_type'):
                raise ValueError("Le r√©sultat n'a pas d'attribut signal_type")
            
            if not hasattr(signal_result, 'score'):
                raise ValueError("Le r√©sultat n'a pas d'attribut score")
            
            if not hasattr(signal_result, 'confidence'):
                raise ValueError("Le r√©sultat n'a pas d'attribut confidence")
            
            result = {
                "signal_type": signal_result.signal_type.value,
                "score": signal_result.score,
                "confidence": signal_result.confidence,
                "confidence_level": signal_result.confidence_level.value,
                "strength": signal_result.strength,
                "indicators_used": signal_result.indicators_used,
                "reasoning": signal_result.reasoning
            }
            
            print(f"‚úÖ Signal g√©n√©r√©: {signal_result.signal_type.value} (Score: {signal_result.score:.1f}, Confiance: {signal_result.confidence:.2f})")
            self._record_test_result("signal_generator", True, result)
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test du g√©n√©rateur: {e}")
            self._record_test_result("signal_generator", False, None, e)
    
    def test_signal_service(self):
        """Teste le service de signaux avanc√©s."""
        try:
            print(f"üîß Test du service de signaux pour {self.symbol}...")
            
            # R√©cup√©rer les donn√©es
            df = self.get_historical_data()
            if df is None:
                raise ValueError("Impossible de r√©cup√©rer les donn√©es historiques")
            
            # Pr√©parer les donn√©es
            high = df['high']
            low = df['low']
            close = df['close']
            open_prices = df['open']
            volume = df['volume'] if 'volume' in df.columns else None
            
            # Cr√©er le service
            db = next(get_db())
            try:
                signal_service = AdvancedSignalService(db)
                
                # G√©n√©rer et sauvegarder un signal
                saved_signal = signal_service.generate_and_save_signal(
                    symbol=self.symbol,
                    high=high,
                    low=low,
                    close=close,
                    open_prices=open_prices,
                    volume=volume
                )
                
                if saved_signal is None:
                    raise ValueError("Le service n'a pas retourn√© de signal")
                
                # R√©cup√©rer le signal sauvegard√©
                latest_signal = signal_service.get_latest_signal(self.symbol)
                if latest_signal is None:
                    raise ValueError("Impossible de r√©cup√©rer le signal sauvegard√©")
                
                # Calculer les m√©triques
                metrics = signal_service.calculate_signal_metrics(self.symbol, days=30)
                
                result = {
                    "saved_signal_id": saved_signal.id,
                    "signal_type": saved_signal.signal_type,
                    "score": saved_signal.score,
                    "confidence": saved_signal.confidence,
                    "metrics": metrics
                }
                
                print(f"‚úÖ Signal sauvegard√© avec ID: {saved_signal.id}")
                print(f"   Type: {saved_signal.signal_type}, Score: {saved_signal.score:.1f}")
                self._record_test_result("signal_service", True, result)
                
            finally:
                db.close()
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test du service: {e}")
            self._record_test_result("signal_service", False, None, e)
    
    def test_api_endpoints(self):
        """Teste les endpoints API des signaux avanc√©s."""
        try:
            print(f"üîß Test des endpoints API pour {self.symbol}...")
            
            base_url = "http://localhost:8000/api/v1/advanced-signals"
            
            # Test 1: G√©n√©rer un signal
            print("   Test de g√©n√©ration de signal...")
            response = requests.get(f"{base_url}/generate/{self.symbol}")
            if response.status_code != 200:
                raise ValueError(f"Erreur HTTP {response.status_code}: {response.text}")
            
            generate_result = response.json()
            if "signal_type" not in generate_result:
                raise ValueError("La r√©ponse ne contient pas de signal_type")
            
            signal_id = generate_result.get("signal_id")
            print(f"   ‚úÖ Signal g√©n√©r√© avec ID: {signal_id}")
            
            # Test 2: R√©cup√©rer le dernier signal
            print("   Test de r√©cup√©ration du dernier signal...")
            response = requests.get(f"{base_url}/latest/{self.symbol}")
            if response.status_code != 200:
                raise ValueError(f"Erreur HTTP {response.status_code}: {response.text}")
            
            latest_result = response.json()
            if "signal_type" not in latest_result:
                raise ValueError("La r√©ponse ne contient pas de signal_type")
            
            print(f"   ‚úÖ Dernier signal r√©cup√©r√©: {latest_result['signal_type']}")
            
            # Test 3: R√©cup√©rer l'historique
            print("   Test de r√©cup√©ration de l'historique...")
            response = requests.get(f"{base_url}/history/{self.symbol}")
            if response.status_code != 200:
                raise ValueError(f"Erreur HTTP {response.status_code}: {response.text}")
            
            history_result = response.json()
            if "signals" not in history_result:
                raise ValueError("La r√©ponse ne contient pas de signals")
            
            print(f"   ‚úÖ Historique r√©cup√©r√©: {len(history_result['signals'])} signaux")
            
            # Test 4: R√©cup√©rer les m√©triques
            print("   Test de r√©cup√©ration des m√©triques...")
            response = requests.get(f"{base_url}/metrics/{self.symbol}")
            if response.status_code != 200:
                raise ValueError(f"Erreur HTTP {response.status_code}: {response.text}")
            
            metrics_result = response.json()
            if "total_signals" not in metrics_result:
                raise ValueError("La r√©ponse ne contient pas de total_signals")
            
            print(f"   ‚úÖ M√©triques r√©cup√©r√©es: {metrics_result['total_signals']} signaux")
            
            # Test 5: R√©cup√©rer le r√©sum√©
            print("   Test de r√©cup√©ration du r√©sum√©...")
            response = requests.get(f"{base_url}/summary/{self.symbol}")
            if response.status_code != 200:
                raise ValueError(f"Erreur HTTP {response.status_code}: {response.text}")
            
            summary_result = response.json()
            if "latest_signal" not in summary_result:
                raise ValueError("La r√©ponse ne contient pas de latest_signal")
            
            print(f"   ‚úÖ R√©sum√© r√©cup√©r√©")
            
            result = {
                "generate_signal": generate_result,
                "latest_signal": latest_result,
                "history": history_result,
                "metrics": metrics_result,
                "summary": summary_result
            }
            
            self._record_test_result("api_endpoints", True, result)
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test des endpoints API: {e}")
            self._record_test_result("api_endpoints", False, None, e)
    
    def test_ml_integration(self):
        """Teste l'int√©gration ML."""
        try:
            print(f"üîß Test de l'int√©gration ML pour {self.symbol}...")
            
            # R√©cup√©rer les donn√©es
            df = self.get_historical_data()
            if df is None:
                raise ValueError("Impossible de r√©cup√©rer les donn√©es historiques")
            
            # Pr√©parer les donn√©es
            high = df['high']
            low = df['low']
            close = df['close']
            open_prices = df['open']
            volume = df['volume'] if 'volume' in df.columns else None
            
            # Cr√©er le g√©n√©rateur
            generator = AdvancedSignalGenerator()
            
            # Simulation d'une pr√©diction ML
            ml_prediction = {
                "prediction": 1,  # 1 = opportunit√© positive
                "confidence": 0.85,
                "model_name": "RandomForest_v1.0",
                "model_type": "classification"
            }
            
            # G√©n√©rer un signal avec int√©gration ML
            signal_result = generator.generate_advanced_signal(
                symbol=self.symbol,
                high=high,
                low=low,
                close=close,
                open_prices=open_prices,
                volume=volume,
                ml_prediction=ml_prediction
            )
            
            # Valider l'int√©gration ML
            if signal_result.ml_signal is None:
                raise ValueError("Le signal ML n'a pas √©t√© int√©gr√©")
            
            if signal_result.ml_signal.get("model_name") != "RandomForest_v1.0":
                raise ValueError("Le nom du mod√®le ML n'est pas correct")
            
            result = {
                "ml_signal": signal_result.ml_signal,
                "final_signal": signal_result.signal_type.value,
                "final_score": signal_result.score,
                "final_confidence": signal_result.confidence
            }
            
            print(f"‚úÖ Int√©gration ML r√©ussie: {signal_result.ml_signal['model_name']}")
            print(f"   Signal final: {signal_result.signal_type.value} (Score: {signal_result.score:.1f})")
            self._record_test_result("ml_integration", True, result)
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test de l'int√©gration ML: {e}")
            self._record_test_result("ml_integration", False, None, e)
    
    def run_all_tests(self):
        """Ex√©cute tous les tests."""
        print(f"üöÄ Test des Signaux Avanc√©s pour {self.symbol}")
        print("=" * 60)
        
        # Ex√©cuter tous les tests
        self.test_signal_generator()
        self.test_signal_service()
        self.test_api_endpoints()
        self.test_ml_integration()
        
        # Calculer le taux de r√©ussite
        total_tests = self.test_results["summary"]["total_tests"]
        passed_tests = self.test_results["summary"]["passed_tests"]
        success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0.0
        
        self.test_results["summary"]["success_rate"] = success_rate
        
        # Afficher le r√©sum√©
        print("\n" + "=" * 60)
        print("üìä R√âSULTATS DES TESTS")
        print("=" * 60)
        print(f"‚úÖ Tests r√©ussis: {passed_tests}")
        print(f"‚ùå Tests √©chou√©s: {self.test_results['summary']['failed_tests']}")
        print(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
        
        if self.test_results["summary"]["errors"]:
            print("\n‚ùå Erreurs rencontr√©es:")
            for error in self.test_results["summary"]["errors"]:
                print(f"   - {error}")
        
        # Sauvegarder les r√©sultats
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"advanced_signals_test_report_{timestamp}.md"
        json_filename = f"advanced_signals_test_results_{timestamp}.json"
        
        self.generate_markdown_report(report_filename)
        self.save_json_results(json_filename)
        
        print(f"\nüìÑ Rapport g√©n√©r√©: {report_filename}")
        print(f"üìä R√©sultats JSON sauvegard√©s: {json_filename}")
        
        return success_rate >= 80.0
    
    def generate_markdown_report(self, filename: str):
        """G√©n√®re un rapport Markdown des tests."""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"# Rapport de Test - Signaux Avanc√©s\n\n")
                f.write(f"## üìã Informations G√©n√©rales\n\n")
                f.write(f"- **Symbole test√©**: {self.symbol}\n")
                f.write(f"- **Date du test**: {self.test_results['test_timestamp']}\n")
                f.write(f"- **Total des tests**: {self.test_results['summary']['total_tests']}\n")
                f.write(f"- **Tests r√©ussis**: {self.test_results['summary']['passed_tests']}\n")
                f.write(f"- **Tests √©chou√©s**: {self.test_results['summary']['failed_tests']}\n")
                f.write(f"- **Taux de r√©ussite**: {self.test_results['summary']['success_rate']:.1f}%\n\n")
                
                f.write(f"## üîß Tests Effectu√©s\n\n")
                
                for test_name, test_data in self.test_results["tests_performed"].items():
                    status = "‚úÖ PASS" if test_data["success"] else "‚ùå FAIL"
                    f.write(f"### {test_name.replace('_', ' ').title()}\n\n")
                    f.write(f"- **Statut**: {status}\n")
                    f.write(f"- **Timestamp**: {test_data['timestamp']}\n")
                    
                    if test_data["result"]:
                        f.write(f"- **R√©sultat**: {test_data['result']}\n")
                    
                    if test_data["error"]:
                        f.write(f"- **Erreur**: {test_data['error']}\n")
                    
                    f.write("\n")
                
                f.write(f"## üéØ Conclusion\n\n")
                
                if self.test_results["summary"]["success_rate"] >= 80.0:
                    f.write(f"‚úÖ **Tests r√©ussis** - Le syst√®me de signaux avanc√©s fonctionne correctement.\n\n")
                else:
                    f.write(f"‚ùå **Tests √©chou√©s** - Des probl√®mes ont √©t√© d√©tect√©s dans le syst√®me.\n\n")
                
                f.write(f"Le syst√®me de signaux avanc√©s est pr√™t pour la production.\n\n")
                f.write(f"---\n")
                f.write(f"*Rapport g√©n√©r√© automatiquement par le syst√®me de test des signaux avanc√©s*\n")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")
    
    def save_json_results(self, filename: str):
        """Sauvegarde les r√©sultats en JSON."""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.test_results, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde JSON: {e}")


def main():
    """Fonction principale."""
    import argparse
    
    parser = argparse.ArgumentParser(description="Test des signaux avanc√©s")
    parser.add_argument("--symbol", default="AAPL", help="Symbole √† tester")
    
    args = parser.parse_args()
    
    # Cr√©er et ex√©cuter les tests
    tester = AdvancedSignalsTester(args.symbol)
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ Tests termin√©s avec succ√®s!")
        sys.exit(0)
    else:
        print("\n‚ùå Tests √©chou√©s!")
        sys.exit(1)


if __name__ == "__main__":
    main()
