#!/usr/bin/env python3
"""
Script pour tester directement le screener ML sans Celery
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.core.database import SessionLocal
from app.tasks.full_screener_ml_web_tasks import MLWebService
from app.models.schemas import ScreenerRequest
from datetime import datetime, date

def test_screener_without_celery():
    """Tester le screener sans Celery"""
    print("üîß Test du screener ML sans Celery...")
    
    db = SessionLocal()
    try:
        # Cr√©er une requ√™te de test
        request = ScreenerRequest(
            target_return_percentage=2.0,
            time_horizon_days=14,
            risk_tolerance=0.6
        )
        
        print(f"‚úÖ Requ√™te cr√©√©e: {request}")
        
        # Cr√©er le service ML
        ml_service = MLWebService()
        print("‚úÖ MLWebService cr√©√©")
        
        # R√©cup√©rer les symboles (limit√© √† 3 pour le test)
        symbols = ml_service.get_active_symbols(db, limit=3)
        print(f"üìä Symboles r√©cup√©r√©s: {symbols}")
        
        if not symbols:
            print("‚ùå Aucun symbole trouv√©")
            return
        
        # Phase 1: Entra√Ænement des mod√®les
        print("üöÄ Phase 1: Entra√Ænement des mod√®les...")
        successful_models = 0
        
        for i, symbol in enumerate(symbols):
            print(f"üîß Entra√Ænement {symbol} ({i+1}/{len(symbols)})...")
            
            try:
                # Cr√©er les param√®tres cibles
                target_param = ml_service.create_target_parameter(db, symbol, request, "test_user")
                print(f"‚úÖ Target parameter cr√©√© pour {symbol}: {target_param.id}")
                
                # Entra√Æner le mod√®le
                success = ml_service.train_model_for_symbol(db, symbol, target_param)
                if success:
                    successful_models += 1
                    print(f"‚úÖ Mod√®le entra√Æn√© avec succ√®s pour {symbol}")
                else:
                    print(f"‚ùå √âchec de l'entra√Ænement pour {symbol}")
                    
            except Exception as e:
                print(f"‚ùå Erreur pour {symbol}: {e}")
                continue
        
        print(f"üìä R√©sultat entra√Ænement: {successful_models}/{len(symbols)} mod√®les")
        
        # Phase 2: Pr√©dictions
        if successful_models > 0:
            print("üöÄ Phase 2: Pr√©dictions...")
            opportunities_found = 0
            
            # R√©cup√©rer les mod√®les entra√Æn√©s
            from app.models.database import MLModels
            trained_models = db.query(MLModels).filter(
                MLModels.symbol.in_(symbols),
                MLModels.is_active == True
            ).all()
            
            for model in trained_models:
                try:
                    prediction_result = ml_service.predict_for_model(db, model, request)
                    if prediction_result and prediction_result.get('success'):
                        prediction = prediction_result['prediction']
                        confidence = prediction_result['confidence']
                        
                        if prediction == 1.0 and confidence >= request.risk_tolerance:
                            opportunities_found += 1
                            print(f"üéØ {model.symbol}: Opportunit√© trouv√©e! Confiance: {confidence:.1%}")
                        else:
                            print(f"‚è≠Ô∏è {model.symbol}: Pas d'opportunit√© (Confiance: {confidence:.1%})")
                    else:
                        print(f"‚ùå {model.symbol}: √âchec de la pr√©diction")
                        
                except Exception as e:
                    print(f"‚ùå Erreur pr√©diction pour {model.symbol}: {e}")
                    continue
            
            print(f"üéâ Screener termin√©: {opportunities_found} opportunit√©s trouv√©es")
        else:
            print("‚ùå Aucun mod√®le entra√Æn√© - impossible de faire des pr√©dictions")
            
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    test_screener_without_celery()
