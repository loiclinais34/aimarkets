#!/usr/bin/env python3
"""
Test de persistance des donn√©es de la Phase 3.

Ce script teste que les mod√®les de sentiment persistent correctement
leurs donn√©es en base de donn√©es et r√©cup√®rent les donn√©es depuis la base.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging
import requests
import time

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_sentiment_persistence():
    """Test de persistance des donn√©es de sentiment."""
    
    print("üß™ Test de Persistance - Phase 3 : Mod√®les de Sentiment")
    print("=" * 60)
    
    try:
        # Import des services de base de donn√©es
        from app.core.database import get_db
        from app.models.sentiment_analysis import GARCHModels as GARCHModelsModel, MonteCarloSimulations, MarkovChainAnalysis as MarkovChainAnalysisModel
        from app.models.database import HistoricalData
        
        # R√©cup√©rer une session de base de donn√©es
        db = next(get_db())
        
        print("‚úÖ Connexion √† la base de donn√©es √©tablie")
        
        # V√©rifier les donn√©es historiques disponibles
        print("\nüìä V√©rification des donn√©es historiques")
        print("-" * 40)
        
        symbol = "AAPL"
        historical_count = db.query(HistoricalData).filter(
            HistoricalData.symbol == symbol
        ).count()
        
        print(f"   Donn√©es historiques pour {symbol}: {historical_count} enregistrements")
        
        if historical_count < 100:
            print("   ‚ö†Ô∏è  Pas assez de donn√©es historiques pour les tests")
            return False
        
        # Test 1: Persistance GARCH
        print("\nüî¨ Test 1: Persistance GARCH")
        print("-" * 30)
        
        try:
            # Appeler l'endpoint GARCH
            response = requests.get(f"http://localhost:8000/api/v1/sentiment-analysis/garch/{symbol}")
            
            if response.status_code == 200:
                garch_data = response.json()
                print(f"‚úÖ Endpoint GARCH appel√© avec succ√®s")
                print(f"   Volatilit√© pr√©vue: {garch_data.get('analysis', {}).get('volatility_forecast', 'N/A')}")
                print(f"   Persist√©: {garch_data.get('persisted', False)}")
                
                # V√©rifier en base de donn√©es
                garch_records = db.query(GARCHModelsModel).filter(
                    GARCHModelsModel.symbol == symbol,
                    GARCHModelsModel.analysis_date >= datetime.now().date()
                ).all()
                
                print(f"   Enregistrements GARCH en base: {len(garch_records)}")
                
                if garch_records:
                    latest_garch = garch_records[-1]
                    print(f"   Dernier enregistrement:")
                    print(f"     - Mod√®le: {latest_garch.model_type}")
                    print(f"     - Volatilit√©: {latest_garch.volatility_forecast}")
                    print(f"     - VaR 95%: {latest_garch.var_95}")
                    print(f"     - AIC: {latest_garch.aic}")
                
            else:
                print(f"‚ùå Erreur endpoint GARCH: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Erreur test GARCH: {str(e)}")
        
        # Test 2: Persistance Monte Carlo
        print("\nüé≤ Test 2: Persistance Monte Carlo")
        print("-" * 30)
        
        try:
            # Appeler l'endpoint Monte Carlo
            response = requests.get(f"http://localhost:8000/api/v1/sentiment-analysis/monte-carlo/{symbol}")
            
            if response.status_code == 200:
                mc_data = response.json()
                print(f"‚úÖ Endpoint Monte Carlo appel√© avec succ√®s")
                print(f"   Prix actuel: ${mc_data.get('current_price', 'N/A')}")
                print(f"   Persist√©: {mc_data.get('persisted', False)}")
                
                # V√©rifier en base de donn√©es
                mc_records = db.query(MonteCarloSimulations).filter(
                    MonteCarloSimulations.symbol == symbol,
                    MonteCarloSimulations.analysis_date >= datetime.now().date()
                ).all()
                
                print(f"   Enregistrements Monte Carlo en base: {len(mc_records)}")
                
                if mc_records:
                    latest_mc = mc_records[-1]
                    print(f"   Dernier enregistrement:")
                    print(f"     - Prix: ${latest_mc.current_price}")
                    print(f"     - Volatilit√©: {latest_mc.volatility}")
                    print(f"     - VaR 95%: {latest_mc.var_95}")
                    print(f"     - Simulations: {latest_mc.simulations_count}")
                
            else:
                print(f"‚ùå Erreur endpoint Monte Carlo: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Erreur test Monte Carlo: {str(e)}")
        
        # Test 3: Persistance Markov
        print("\nüîó Test 3: Persistance Markov")
        print("-" * 30)
        
        try:
            # Appeler l'endpoint Markov
            response = requests.get(f"http://localhost:8000/api/v1/sentiment-analysis/markov/{symbol}")
            
            if response.status_code == 200:
                markov_data = response.json()
                print(f"‚úÖ Endpoint Markov appel√© avec succ√®s")
                print(f"   √âtats identifi√©s: {markov_data.get('analysis', {}).get('n_states', 'N/A')}")
                print(f"   Persist√©: {markov_data.get('persisted', False)}")
                
                # V√©rifier en base de donn√©es
                markov_records = db.query(MarkovChainAnalysisModel).filter(
                    MarkovChainAnalysisModel.symbol == symbol,
                    MarkovChainAnalysisModel.analysis_date >= datetime.now().date()
                ).all()
                
                print(f"   Enregistrements Markov en base: {len(markov_records)}")
                
                if markov_records:
                    latest_markov = markov_records[-1]
                    print(f"   Dernier enregistrement:")
                    print(f"     - √âtats: {latest_markov.n_states}")
                    print(f"     - √âtat actuel: {latest_markov.current_state}")
                    print(f"     - Date: {latest_markov.analysis_date}")
                
            else:
                print(f"‚ùå Erreur endpoint Markov: {response.status_code}")
                print(f"   D√©tail: {response.text}")
                
        except Exception as e:
            print(f"‚ùå Erreur test Markov: {str(e)}")
        
        # Test 4: V√©rification de la r√©cup√©ration des donn√©es
        print("\nüìà Test 4: R√©cup√©ration des donn√©es depuis la base")
        print("-" * 40)
        
        try:
            # V√©rifier que les donn√©es sont bien r√©cup√©r√©es depuis la base
            recent_data = db.query(HistoricalData).filter(
                HistoricalData.symbol == symbol,
                HistoricalData.date >= datetime.now().date() - timedelta(days=30)
            ).order_by(HistoricalData.date.desc()).limit(5).all()
            
            print(f"   Donn√©es r√©centes r√©cup√©r√©es: {len(recent_data)}")
            
            if recent_data:
                print(f"   Derni√®res donn√©es:")
                for i, record in enumerate(recent_data[:3]):
                    print(f"     {i+1}. {record.date}: ${record.close}")
            
        except Exception as e:
            print(f"‚ùå Erreur r√©cup√©ration donn√©es: {str(e)}")
        
        # Test 5: V√©rification de l'int√©grit√© des donn√©es
        print("\nüîç Test 5: Int√©grit√© des donn√©es")
        print("-" * 30)
        
        try:
            # V√©rifier que les donn√©es persist√©es sont coh√©rentes
            garch_count = db.query(GARCHModelsModel).filter(
                GARCHModelsModel.symbol == symbol
            ).count()
            
            mc_count = db.query(MonteCarloSimulations).filter(
                MonteCarloSimulations.symbol == symbol
            ).count()
            
            markov_count = db.query(MarkovChainAnalysisModel).filter(
                MarkovChainAnalysisModel.symbol == symbol
            ).count()
            
            print(f"   Enregistrements GARCH: {garch_count}")
            print(f"   Enregistrements Monte Carlo: {mc_count}")
            print(f"   Enregistrements Markov: {markov_count}")
            
            # V√©rifier les donn√©es du jour
            today_garch = db.query(GARCHModelsModel).filter(
                GARCHModelsModel.symbol == symbol,
                GARCHModelsModel.analysis_date >= datetime.now().date()
            ).count()
            
            today_mc = db.query(MonteCarloSimulations).filter(
                MonteCarloSimulations.symbol == symbol,
                MonteCarloSimulations.analysis_date >= datetime.now().date()
            ).count()
            
            today_markov = db.query(MarkovChainAnalysisModel).filter(
                MarkovChainAnalysisModel.symbol == symbol,
                MarkovChainAnalysisModel.analysis_date >= datetime.now().date()
            ).count()
            
            print(f"   Enregistrements d'aujourd'hui:")
            print(f"     - GARCH: {today_garch}")
            print(f"     - Monte Carlo: {today_mc}")
            print(f"     - Markov: {today_markov}")
            
        except Exception as e:
            print(f"‚ùå Erreur v√©rification int√©grit√©: {str(e)}")
        
        db.close()
        
        print("\nüéâ Tests de persistance termin√©s!")
        print("‚úÖ Phase 3: Persistance des donn√©es - V√âRIFI√âE")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("‚ö†Ô∏è  Assurez-vous que le serveur backend est d√©marr√© sur http://localhost:8000")
    print("   Commande: cd backend && uvicorn app.main:app --reload")
    print()
    
    success = test_sentiment_persistence()
    if success:
        print("\nüöÄ Persistance des donn√©es Phase 3 op√©rationnelle!")
    else:
        print("\n‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s dans la persistance")
