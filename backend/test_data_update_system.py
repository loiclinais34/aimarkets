#!/usr/bin/env python3
"""
Script de test pour le syst√®me de mise √† jour des donn√©es
"""
import sys
import time
import requests
from pathlib import Path

# Ajouter le r√©pertoire backend au PYTHONPATH
backend_dir = Path(__file__).parent
sys.path.insert(0, str(backend_dir))

def test_data_update_system():
    """Tester le syst√®me de mise √† jour des donn√©es"""
    
    base_url = "http://localhost:8000/api/v1/data-update"
    
    print("üß™ Test du syst√®me de mise √† jour des donn√©es")
    print("=" * 50)
    
    # Test 1: V√©rifier le statut des donn√©es
    print("\n1. V√©rification du statut des donn√©es...")
    try:
        response = requests.get(f"{base_url}/status")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Statut r√©cup√©r√© avec succ√®s")
            print(f"   Statut global: {data['data']['overall_status']}")
            print(f"   Donn√©es historiques: {data['data']['historical_freshness']['message']}")
            print(f"   Donn√©es de sentiment: {data['data']['sentiment_freshness']['message']}")
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du statut: {e}")
    
    # Test 2: V√©rifier la fra√Æcheur des donn√©es
    print("\n2. V√©rification de la fra√Æcheur des donn√©es...")
    try:
        response = requests.get(f"{base_url}/freshness")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Fra√Æcheur v√©rifi√©e avec succ√®s")
            print(f"   Mise √† jour n√©cessaire: {data['data']['overall_needs_update']}")
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la fra√Æcheur: {e}")
    
    # Test 3: R√©cup√©rer les statistiques
    print("\n3. R√©cup√©ration des statistiques...")
    try:
        response = requests.get(f"{base_url}/stats")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Statistiques r√©cup√©r√©es avec succ√®s")
            historical = data['data']['historical_data']
            sentiment = data['data']['sentiment_data']
            print(f"   Donn√©es historiques: {historical['total_records']} enregistrements, {historical['unique_symbols']} symboles")
            print(f"   Donn√©es de sentiment: {sentiment['total_records']} enregistrements, {sentiment['unique_symbols']} symboles")
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {e}")
    
    # Test 4: D√©clencher une mise √† jour (simulation)
    print("\n4. Test de d√©clenchement de mise √† jour...")
    try:
        response = requests.post(f"{base_url}/trigger-update", json={"force_update": False})
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Mise √† jour d√©clench√©e avec succ√®s")
            print(f"   Task ID: {data['task_id']}")
            
            # Suivre le statut de la t√¢che
            task_id = data['task_id']
            print(f"\n5. Suivi de la t√¢che {task_id}...")
            
            for i in range(10):  # Suivre pendant 20 secondes maximum
                time.sleep(2)
                try:
                    status_response = requests.get(f"{base_url}/task-status/{task_id}")
                    if status_response.status_code == 200:
                        status_data = status_response.json()
                        task_info = status_data['data']
                        print(f"   √âtat: {task_info['state']} - {task_info['status']}")
                        
                        if task_info.get('progress'):
                            print(f"   Progr√®s: {task_info['progress']}%")
                        
                        if task_info.get('current_symbol'):
                            print(f"   Symbole actuel: {task_info['current_symbol']}")
                        
                        if task_info['state'] in ['SUCCESS', 'FAILURE']:
                            print(f"   R√©sultat final: {task_info}")
                            break
                    else:
                        print(f"‚ùå Erreur lors du suivi: {status_response.status_code}")
                        break
                except Exception as e:
                    print(f"‚ùå Erreur lors du suivi: {e}")
                    break
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©clenchement de la mise √† jour: {e}")
    
    # Test 6: V√©rifier les t√¢ches actives
    print("\n6. V√©rification des t√¢ches actives...")
    try:
        response = requests.get(f"{base_url}/active-tasks")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ T√¢ches actives r√©cup√©r√©es avec succ√®s")
            print(f"   Nombre de t√¢ches actives: {data['data']['total_active']}")
            for task in data['data']['active_tasks']:
                print(f"   - {task['name']} (ID: {task['task_id'][:8]}...)")
        else:
            print(f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des t√¢ches actives: {e}")
    
    print("\n" + "=" * 50)
    print("üèÅ Test termin√©")

if __name__ == "__main__":
    test_data_update_system()