#!/usr/bin/env python3
"""
Script de test pour le syst√®me de recalcul des indicateurs
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.indicators_recalculation_service import IndicatorsRecalculationService
from app.core.database import get_db
from datetime import date, timedelta

def test_indicators_recalculation():
    """Test du service de recalcul des indicateurs"""
    print("üîß Test du service de recalcul des indicateurs...")
    
    # Obtenir une session de base de donn√©es
    db = next(get_db())
    
    try:
        indicators_service = IndicatorsRecalculationService(db)
        
        # Test 1: Recalcul des indicateurs techniques pour un symbole
        print("\n1. Test recalcul des indicateurs techniques...")
        test_symbol = "AAPL"  # Utiliser un symbole qui existe probablement
        
        result = indicators_service.recalculate_technical_indicators(test_symbol)
        print(f"   R√©sultat: {result['success']}")
        if result['success']:
            print(f"   Dates trait√©es: {result['processed_dates']}")
            print(f"   Total dates: {result['total_dates']}")
        else:
            print(f"   Erreur: {result['error']}")
        
        # Test 2: Recalcul des indicateurs de sentiment
        print("\n2. Test recalcul des indicateurs de sentiment...")
        result = indicators_service.recalculate_sentiment_indicators(test_symbol)
        print(f"   R√©sultat: {result['success']}")
        if result['success']:
            print(f"   Dates trait√©es: {result['processed_dates']}")
            print(f"   Total dates: {result['total_dates']}")
        else:
            print(f"   Erreur: {result['error']}")
        
        # Test 3: Recalcul des corr√©lations
        print("\n3. Test recalcul des corr√©lations...")
        test_symbols = ["AAPL", "MSFT", "GOOGL"]  # Symboles de test
        result = indicators_service.recalculate_correlations(test_symbols)
        print(f"   R√©sultat: {result['success']}")
        if result['success']:
            print(f"   Corr√©lations trait√©es: {result['processed_correlations']}")
            print(f"   Symboles: {result['symbols_count']}")
        else:
            print(f"   Erreur: {result['error']}")
        
        # Test 4: Recalcul complet
        print("\n4. Test recalcul complet...")
        result = indicators_service.recalculate_all_indicators(test_symbols)
        print(f"   R√©sultat global: {result['success']}")
        print(f"   Symboles trait√©s: {result['symbols_processed']}")
        print(f"   Indicateurs techniques: {result['technical_indicators']['success']} succ√®s, {result['technical_indicators']['failed']} √©checs")
        print(f"   Indicateurs de sentiment: {result['sentiment_indicators']['success']} succ√®s, {result['sentiment_indicators']['failed']} √©checs")
        print(f"   Corr√©lations: {result['correlations']['success']} succ√®s, {result['correlations']['failed']} √©checs")
        
        if result['errors']:
            print(f"   Erreurs: {len(result['errors'])}")
            for error in result['errors'][:3]:  # Afficher les 3 premi√®res erreurs
                print(f"     - {error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False
    finally:
        db.close()

def test_api_endpoints():
    """Test des endpoints API"""
    print("\nüåê Test des endpoints API...")
    
    import requests
    
    base_url = "http://localhost:8000"
    
    # Test 1: Statut des indicateurs
    print("\n1. Test endpoint /api/v1/indicators/status/AAPL...")
    try:
        response = requests.get(f"{base_url}/api/v1/indicators/status/AAPL", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Statut r√©cup√©r√©: {data['data']['overall_status']}")
            print(f"   Indicateurs techniques: {data['data']['technical_indicators']['count']}")
            print(f"   Indicateurs de sentiment: {data['data']['sentiment_indicators']['count']}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")
    
    # Test 2: Recalcul des indicateurs techniques
    print("\n2. Test endpoint /api/v1/indicators/recalculate-technical/AAPL...")
    try:
        response = requests.post(f"{base_url}/api/v1/indicators/recalculate-technical/AAPL", timeout=30)
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Recalcul r√©ussi: {data['data']['processed_dates']} dates")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")
            print(f"   D√©tail: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")
    
    # Test 3: Recalcul des corr√©lations
    print("\n3. Test endpoint /api/v1/indicators/recalculate-correlations...")
    try:
        response = requests.post(
            f"{base_url}/api/v1/indicators/recalculate-correlations",
            json=["AAPL", "MSFT"],  # Envoyer directement la liste
            timeout=30
        )
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Corr√©lations recalcul√©es: {data['data']['processed_correlations']}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")
            print(f"   D√©tail: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")

def test_integration_with_data_update():
    """Test de l'int√©gration avec le service de mise √† jour des donn√©es"""
    print("\nüîÑ Test de l'int√©gration avec la mise √† jour des donn√©es...")
    
    import requests
    
    base_url = "http://localhost:8000"
    
    # Test de mise √† jour des donn√©es historiques (qui devrait d√©clencher le recalcul automatique)
    print("\n1. Test mise √† jour des donn√©es historiques avec recalcul automatique...")
    try:
        response = requests.post(
            f"{base_url}/api/v1/data-update/update-historical/AAPL",
            json={"force_update": True},
            timeout=60
        )
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Mise √† jour r√©ussie: {data['data']['total_records']} enregistrements")
            print(f"   Indicateurs recalcul√©s: {data['data']['indicators_recalculated']}")
            if data['data']['indicators_recalculated']:
                print(f"   Dates d'indicateurs trait√©es: {data['data']['indicators_processed_dates']}")
        else:
            print(f"   ‚ùå Erreur HTTP: {response.status_code}")
            print(f"   D√©tail: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erreur de connexion: {e}")

def main():
    """Fonction principale de test"""
    print("üöÄ Test du syst√®me de recalcul des indicateurs")
    print("=" * 60)
    
    # Test 1: Service de recalcul
    try:
        success = test_indicators_recalculation()
        print(f"\n‚úÖ Tests du service de recalcul termin√©s ({'Succ√®s' if success else '√âchec'})")
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests du service: {e}")
    
    # Test 2: Endpoints API
    try:
        test_api_endpoints()
        print("\n‚úÖ Tests des endpoints API termin√©s")
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests API: {e}")
    
    # Test 3: Int√©gration
    try:
        test_integration_with_data_update()
        print("\n‚úÖ Tests d'int√©gration termin√©s")
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests d'int√©gration: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ R√©sum√©:")
    print("   1. Service de recalcul des indicateurs cr√©√©")
    print("   2. Int√©gration automatique avec la mise √† jour des donn√©es")
    print("   3. Endpoints API pour le recalcul manuel")
    print("   4. Recalcul des indicateurs techniques, de sentiment et des corr√©lations")
    print("   5. Gestion robuste des erreurs et logging d√©taill√©")

if __name__ == "__main__":
    main()
