#!/usr/bin/env python3
"""
Test des mod√®les de sentiment pour la Phase 3.

Ce script teste les mod√®les GARCH, Monte Carlo et Markov Chain
pour s'assurer qu'ils fonctionnent correctement.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_sentiment_models():
    """Test complet des mod√®les de sentiment."""
    
    print("üß™ Test des Mod√®les de Sentiment - Phase 3")
    print("=" * 50)
    
    try:
        # Import des services
        from app.services.sentiment_analysis import GARCHModels, MonteCarloSimulation, MarkovChainAnalysis, VolatilityForecaster
        from app.services.polygon_service import PolygonService
        
        print("‚úÖ Services import√©s avec succ√®s")
        
        # R√©cup√©ration des donn√©es de test
        data_service = PolygonService()
        symbol = "AAPL"
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=365)
        
        print(f"üìä R√©cup√©ration des donn√©es pour {symbol}...")
        historical_data = data_service.get_historical_data(
            symbol=symbol,
            from_date=start_date.strftime('%Y-%m-%d'),
            to_date=end_date.strftime('%Y-%m-%d')
        )
        
        if not historical_data or len(historical_data) < 100:
            print("‚ùå Pas assez de donn√©es historiques")
            return False
        
        # Conversion en DataFrame
        df = pd.DataFrame(historical_data)
        df['date'] = pd.to_datetime(df['date'])
        df.set_index('date', inplace=True)
        df = df.sort_index()
        
        # Convertir toutes les colonnes num√©riques en float pour √©viter les probl√®mes de type
        for col in ['open', 'high', 'low', 'close', 'volume']:
            if col in df.columns:
                df[col] = df[col].apply(lambda x: float(x) if x is not None else None)
        
        print(f"‚úÖ {len(df)} jours de donn√©es r√©cup√©r√©es")
        
        # Test 1: Mod√®les GARCH
        print("\nüî¨ Test 1: Mod√®les GARCH")
        print("-" * 30)
        
        try:
            garch_analyzer = GARCHModels()
            
            # Test GARCH standard
            garch_result = garch_analyzer.fit_garch(df['close'], model_type="GARCH")
            print(f"‚úÖ GARCH: Volatilit√© pr√©vue = {garch_result['volatility_forecast']:.4f}")
            print(f"   VaR 95% = {garch_result['var_95']:.4f}")
            print(f"   VaR 99% = {garch_result['var_99']:.4f}")
            
            # Test EGARCH
            egarch_result = garch_analyzer.fit_garch(df['close'], model_type="EGARCH")
            print(f"‚úÖ EGARCH: Volatilit√© pr√©vue = {egarch_result['volatility_forecast']:.4f}")
            
            # Test GJR-GARCH
            gjr_result = garch_analyzer.fit_garch(df['close'], model_type="GJR-GARCH")
            print(f"‚úÖ GJR-GARCH: Volatilit√© pr√©vue = {gjr_result['volatility_forecast']:.4f}")
            
        except Exception as e:
            print(f"‚ùå Erreur GARCH: {str(e)}")
            return False
        
        # Test 2: Simulation Monte Carlo
        print("\nüé≤ Test 2: Simulation Monte Carlo")
        print("-" * 30)
        
        try:
            mc_simulator = MonteCarloSimulation()
            
            # Calculer les param√®tres
            returns = df['close'].pct_change().dropna()
            volatility = returns.std() * np.sqrt(252)  # Volatilit√© annualis√©e
            drift = returns.mean() * 252  # D√©rive annualis√©e
            
            # Simulation
            paths = mc_simulator.simulate_price_paths(
                current_price=float(df['close'].iloc[-1]),
                volatility=volatility,
                drift=drift,
                time_horizon=30,
                simulations=10000
            )
            
            # Calculer VaR
            var_95 = mc_simulator.calculate_var(paths, 0.05)
            var_99 = mc_simulator.calculate_var(paths, 0.01)
            
            print(f"‚úÖ Monte Carlo: {len(paths)} simulations g√©n√©r√©es")
            print(f"   Prix actuel = ${df['close'].iloc[-1]:.2f}")
            print(f"   Volatilit√© = {volatility:.4f}")
            print(f"   VaR 95% = {var_95:.4f}")
            print(f"   VaR 99% = {var_99:.4f}")
            
            # Test de stress
            stress_result = mc_simulator.stress_test(paths, stress_scenarios={
                'market_crash': -0.2,
                'volatility_spike': 2.0
            })
            print(f"   Stress test: {len(stress_result)} sc√©narios test√©s")
            
        except Exception as e:
            print(f"‚ùå Erreur Monte Carlo: {str(e)}")
            return False
        
        # Test 3: Cha√Ænes de Markov
        print("\nüîó Test 3: Cha√Ænes de Markov")
        print("-" * 30)
        
        try:
            markov_analyzer = MarkovChainAnalysis()
            
            # Identifier les √©tats de march√©
            states_result = markov_analyzer.identify_market_states(returns, n_states=3)
            print(f"‚úÖ √âtats identifi√©s: {states_result['n_states']} √©tats")
            print(f"   √âtats: {states_result['state_labels']}")
            
            # Calculer la matrice de transition
            transition_matrix = markov_analyzer.calculate_transition_matrix(
                states_result['states']
            )
            print(f"‚úÖ Matrice de transition calcul√©e: {transition_matrix['transition_matrix'].shape}")
            
            # Pr√©dire l'√©tat futur
            current_state = states_result['states'].iloc[-1]
            future_state = markov_analyzer.predict_future_states(
                transition_matrix['transition_matrix'], current_state, horizon=5
            )
            print(f"‚úÖ √âtat futur pr√©dit: {future_state['most_likely_states'].iloc[-1]}")
            
        except Exception as e:
            print(f"‚ùå Erreur Markov: {str(e)}")
            return False
        
        # Test 4: Pr√©vision de volatilit√©
        print("\nüìà Test 4: Pr√©vision de Volatilit√©")
        print("-" * 30)
        
        try:
            vol_forecaster = VolatilityForecaster()
            
            # Test simple de d√©tection de changement de r√©gime
            regime_forecast = vol_forecaster.forecast_volatility_regime_switching(returns, horizon=5)
            print(f"‚úÖ Pr√©vision avec changement de r√©gime: {regime_forecast.get('regime_forecast', 'N/A')}")
            
        except Exception as e:
            print(f"‚ùå Erreur pr√©vision volatilit√©: {str(e)}")
            return False
        
        # Test 5: Analyse compl√®te
        print("\nüéØ Test 5: Analyse Compl√®te")
        print("-" * 30)
        
        try:
            # Test simple de calcul de VaR
            var_95 = mc_simulator.calculate_var(paths, 0.05)
            var_99 = mc_simulator.calculate_var(paths, 0.01)
            print(f"‚úÖ Analyse Monte Carlo compl√®te:")
            print(f"   VaR 95%: {var_95:.4f}")
            print(f"   VaR 99%: {var_99:.4f}")
            
        except Exception as e:
            print(f"‚ùå Erreur analyse compl√®te: {str(e)}")
            return False
        
        print("\nüéâ Tous les tests des mod√®les de sentiment sont pass√©s avec succ√®s!")
        print("‚úÖ Phase 3: Mod√®les de Sentiment - OP√âRATIONNELS")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_sentiment_models()
    if success:
        print("\nüöÄ Phase 3 pr√™te pour l'int√©gration!")
    else:
        print("\n‚ö†Ô∏è  Des probl√®mes ont √©t√© d√©tect√©s dans la Phase 3")
