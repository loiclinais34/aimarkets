#!/usr/bin/env python3
"""
Script de gestion de la base de donn√©es AIMarkets
Permet de cr√©er, initialiser, sauvegarder et restaurer la base de donn√©es
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path
from datetime import datetime
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(str(Path(__file__).parent.parent))

from app.core.config import settings
from app.core.database import engine, Base
from app.models.database import *


class DatabaseManager:
    def __init__(self):
        self.db_config = {
            'host': settings.db_host,
            'port': settings.db_port,
            'user': settings.db_user,
            'password': settings.db_password,
            'database': settings.db_name
        }
    
    def create_database(self):
        """Cr√©er la base de donn√©es si elle n'existe pas"""
        try:
            # Connexion √† PostgreSQL sans sp√©cifier de base de donn√©es
            conn = psycopg2.connect(
                host=self.db_config['host'],
                port=self.db_config['port'],
                user=self.db_config['user'],
                password=self.db_config['password'],
                database='postgres'  # Connexion √† la base par d√©faut
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            cursor = conn.cursor()
            
            # V√©rifier si la base de donn√©es existe
            cursor.execute(
                "SELECT 1 FROM pg_database WHERE datname = %s",
                (self.db_config['database'],)
            )
            
            if cursor.fetchone():
                print(f"‚úÖ La base de donn√©es '{self.db_config['database']}' existe d√©j√†")
            else:
                # Cr√©er la base de donn√©es
                cursor.execute(f"CREATE DATABASE {self.db_config['database']}")
                print(f"‚úÖ Base de donn√©es '{self.db_config['database']}' cr√©√©e avec succ√®s")
            
            cursor.close()
            conn.close()
            
        except psycopg2.Error as e:
            print(f"‚ùå Erreur lors de la cr√©ation de la base de donn√©es: {e}")
            sys.exit(1)
    
    def create_tables(self):
        """Cr√©er toutes les tables de la base de donn√©es"""
        try:
            print("üîÑ Cr√©ation des tables...")
            Base.metadata.create_all(bind=engine)
            print("‚úÖ Toutes les tables ont √©t√© cr√©√©es avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation des tables: {e}")
            sys.exit(1)
    
    def drop_tables(self):
        """Supprimer toutes les tables de la base de donn√©es"""
        try:
            print("üîÑ Suppression des tables...")
            Base.metadata.drop_all(bind=engine)
            print("‚úÖ Toutes les tables ont √©t√© supprim√©es avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de la suppression des tables: {e}")
            sys.exit(1)
    
    def reset_database(self):
        """R√©initialiser compl√®tement la base de donn√©es"""
        print("üîÑ R√©initialisation de la base de donn√©es...")
        self.drop_tables()
        self.create_tables()
        print("‚úÖ Base de donn√©es r√©initialis√©e avec succ√®s")
    
    def backup_database(self, backup_path: str = None):
        """Sauvegarder la base de donn√©es"""
        if not backup_path:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = f"backup_aimarkets_{timestamp}.sql"
        
        try:
            print(f"üîÑ Sauvegarde de la base de donn√©es vers {backup_path}...")
            
            # Commande pg_dump
            cmd = [
                'pg_dump',
                '-h', self.db_config['host'],
                '-p', str(self.db_config['port']),
                '-U', self.db_config['user'],
                '-d', self.db_config['database'],
                '-f', backup_path,
                '--verbose'
            ]
            
            # D√©finir le mot de passe via variable d'environnement
            env = os.environ.copy()
            env['PGPASSWORD'] = self.db_config['password']
            
            result = subprocess.run(cmd, env=env, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ Sauvegarde cr√©√©e avec succ√®s: {backup_path}")
            else:
                print(f"‚ùå Erreur lors de la sauvegarde: {result.stderr}")
                sys.exit(1)
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
            sys.exit(1)
    
    def restore_database(self, backup_path: str):
        """Restaurer la base de donn√©es depuis un fichier de sauvegarde"""
        if not os.path.exists(backup_path):
            print(f"‚ùå Le fichier de sauvegarde {backup_path} n'existe pas")
            sys.exit(1)
        
        try:
            print(f"üîÑ Restauration de la base de donn√©es depuis {backup_path}...")
            
            # Commande psql
            cmd = [
                'psql',
                '-h', self.db_config['host'],
                '-p', str(self.db_config['port']),
                '-U', self.db_config['user'],
                '-d', self.db_config['database'],
                '-f', backup_path,
                '--verbose'
            ]
            
            # D√©finir le mot de passe via variable d'environnement
            env = os.environ.copy()
            env['PGPASSWORD'] = self.db_config['password']
            
            result = subprocess.run(cmd, env=env, capture_output=True, text=True)
            
            if result.returncode == 0:
                print(f"‚úÖ Base de donn√©es restaur√©e avec succ√®s depuis {backup_path}")
            else:
                print(f"‚ùå Erreur lors de la restauration: {result.stderr}")
                sys.exit(1)
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la restauration: {e}")
            sys.exit(1)
    
    def check_connection(self):
        """V√©rifier la connexion √† la base de donn√©es"""
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            cursor.execute("SELECT version();")
            version = cursor.fetchone()[0]
            cursor.close()
            conn.close()
            print(f"‚úÖ Connexion √† la base de donn√©es r√©ussie")
            print(f"üìä Version PostgreSQL: {version}")
        except psycopg2.Error as e:
            print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
            sys.exit(1)
    
    def show_tables(self):
        """Afficher la liste des tables de la base de donn√©es"""
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT table_name, table_type 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """)
            tables = cursor.fetchall()
            cursor.close()
            conn.close()
            
            if tables:
                print("üìã Tables de la base de donn√©es:")
                for table_name, table_type in tables:
                    print(f"  - {table_name} ({table_type})")
            else:
                print("üìã Aucune table trouv√©e dans la base de donn√©es")
                
        except psycopg2.Error as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des tables: {e}")
            sys.exit(1)
    
    def show_stats(self):
        """Afficher les statistiques de la base de donn√©es"""
        try:
            conn = psycopg2.connect(**self.db_config)
            cursor = conn.cursor()
            
            # Statistiques g√©n√©rales
            cursor.execute("""
                SELECT 
                    schemaname,
                    tablename,
                    n_tup_ins as inserts,
                    n_tup_upd as updates,
                    n_tup_del as deletes,
                    n_live_tup as live_tuples,
                    n_dead_tup as dead_tuples
                FROM pg_stat_user_tables
                ORDER BY n_live_tup DESC;
            """)
            stats = cursor.fetchall()
            
            print("üìä Statistiques de la base de donn√©es:")
            print(f"{'Table':<25} {'Inserts':<10} {'Updates':<10} {'Deletes':<10} {'Live':<10} {'Dead':<10}")
            print("-" * 80)
            
            for stat in stats:
                schema, table, inserts, updates, deletes, live, dead = stat
                print(f"{table:<25} {inserts:<10} {updates:<10} {deletes:<10} {live:<10} {dead:<10}")
            
            cursor.close()
            conn.close()
            
        except psycopg2.Error as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des statistiques: {e}")
            sys.exit(1)


def main():
    parser = argparse.ArgumentParser(description="Gestionnaire de base de donn√©es AIMarkets")
    parser.add_argument('action', choices=[
        'create-db', 'create-tables', 'drop-tables', 'reset', 
        'backup', 'restore', 'check', 'tables', 'stats'
    ], help="Action √† effectuer")
    parser.add_argument('--backup-path', help="Chemin du fichier de sauvegarde")
    parser.add_argument('--restore-path', help="Chemin du fichier de restauration")
    
    args = parser.parse_args()
    
    db_manager = DatabaseManager()
    
    if args.action == 'create-db':
        db_manager.create_database()
    elif args.action == 'create-tables':
        db_manager.create_tables()
    elif args.action == 'drop-tables':
        db_manager.drop_tables()
    elif args.action == 'reset':
        db_manager.reset_database()
    elif args.action == 'backup':
        db_manager.backup_database(args.backup_path)
    elif args.action == 'restore':
        if not args.restore_path:
            print("‚ùå Le chemin du fichier de restauration est requis")
            sys.exit(1)
        db_manager.restore_database(args.restore_path)
    elif args.action == 'check':
        db_manager.check_connection()
    elif args.action == 'tables':
        db_manager.show_tables()
    elif args.action == 'stats':
        db_manager.show_stats()


if __name__ == "__main__":
    main()
