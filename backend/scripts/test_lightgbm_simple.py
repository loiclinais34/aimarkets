#!/usr/bin/env python3
"""
Test simple et s√©curis√© du service LightGBM
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from datetime import date, datetime
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.database import TargetParameters, MLModels

def test_lightgbm_simple():
    """Test simple du service LightGBM sans entra√Ænement complet"""
    print("üß™ Test simple du service LightGBM...")
    
    # R√©cup√©ration de la session de base de donn√©es
    db = next(get_db())
    
    try:
        # Test 1: V√©rification de la connexion √† la base de donn√©es
        print("\n1Ô∏è‚É£ Test de connexion √† la base de donn√©es...")
        target_param = db.query(TargetParameters).first()
        if target_param:
            print(f"‚úÖ Param√®tre cible trouv√©: {target_param.parameter_name}")
        else:
            print("‚ùå Aucun param√®tre cible trouv√©")
            return
        
        # Test 2: V√©rification des donn√©es disponibles
        print("\n2Ô∏è‚É£ Test des donn√©es disponibles...")
        from app.models.database import HistoricalData, TechnicalIndicators, SentimentIndicators
        
        # V√©rifier les donn√©es historiques
        hist_count = db.query(HistoricalData).filter(HistoricalData.symbol == "AAPL").count()
        print(f"   - Donn√©es historiques AAPL: {hist_count} enregistrements")
        
        # V√©rifier les indicateurs techniques
        tech_count = db.query(TechnicalIndicators).filter(TechnicalIndicators.symbol == "AAPL").count()
        print(f"   - Indicateurs techniques AAPL: {tech_count} enregistrements")
        
        # V√©rifier les indicateurs de sentiment
        sent_count = db.query(SentimentIndicators).filter(SentimentIndicators.symbol == "AAPL").count()
        print(f"   - Indicateurs de sentiment AAPL: {sent_count} enregistrements")
        
        if hist_count < 100 or tech_count < 100 or sent_count < 100:
            print("‚ùå Pas assez de donn√©es pour l'entra√Ænement")
            return
        
        # Test 3: Test d'import de LightGBM
        print("\n3Ô∏è‚É£ Test d'import de LightGBM...")
        try:
            import lightgbm as lgb
            print(f"‚úÖ LightGBM import√© avec succ√®s (version {lgb.__version__})")
        except Exception as e:
            print(f"‚ùå Erreur d'import LightGBM: {e}")
            return
        
        # Test 4: Test de cr√©ation d'un dataset simple
        print("\n4Ô∏è‚É£ Test de cr√©ation d'un dataset simple...")
        try:
            import numpy as np
            import pandas as pd
            
            # Cr√©er des donn√©es de test
            X = np.random.rand(100, 10)
            y = np.random.randint(0, 2, 100)
            
            # Cr√©er un dataset LightGBM
            train_data = lgb.Dataset(X, label=y)
            print("‚úÖ Dataset LightGBM cr√©√© avec succ√®s")
            
            # Test de param√®tres
            params = {
                'objective': 'binary',
                'metric': 'binary_logloss',
                'verbose': -1
            }
            
            # Test d'entra√Ænement minimal
            model = lgb.train(params, train_data, num_boost_round=10)
            print("‚úÖ Mod√®le LightGBM entra√Æn√© avec succ√®s")
            
            # Test de pr√©diction
            prediction = model.predict(X[:5])
            print(f"‚úÖ Pr√©diction effectu√©e: {prediction}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test LightGBM: {e}")
            import traceback
            traceback.print_exc()
            return
        
        # Test 5: Test de cr√©ation du service (sans entra√Ænement)
        print("\n5Ô∏è‚É£ Test de cr√©ation du service LightGBM...")
        try:
            from app.services.lightgbm_service import LightGBMService
            service = LightGBMService(db)
            print("‚úÖ Service LightGBM cr√©√© avec succ√®s")
            
            # Test de pr√©paration des features (sans entra√Ænement)
            print("\n6Ô∏è‚É£ Test de pr√©paration des features...")
            
            # R√©cup√©rer quelques donn√©es
            query = db.query(HistoricalData, TechnicalIndicators, SentimentIndicators).join(
                TechnicalIndicators, HistoricalData.symbol == TechnicalIndicators.symbol
            ).join(
                SentimentIndicators, HistoricalData.symbol == SentimentIndicators.symbol
            ).filter(
                HistoricalData.symbol == "AAPL"
            ).order_by(HistoricalData.date).limit(10)
            
            results = query.all()
            print(f"   - {len(results)} enregistrements r√©cup√©r√©s")
            
            if len(results) > 0:
                # Test de conversion en DataFrame
                data = []
                for hist, tech, sent in results:
                    row = {
                        'date': hist.date,
                        'symbol': hist.symbol,
                        'close': float(hist.close),
                        'sma_5': float(tech.sma_5) if tech.sma_5 else 0,
                        'rsi_14': float(tech.rsi_14) if tech.rsi_14 else 0,
                        'sentiment_score_normalized': float(sent.sentiment_score_normalized) if sent.sentiment_score_normalized else 0,
                    }
                    data.append(row)
                
                df = pd.DataFrame(data)
                print(f"‚úÖ DataFrame cr√©√© avec {len(df)} lignes et {len(df.columns)} colonnes")
                
                # Test de pr√©paration des features
                X, feature_names = service.prepare_features(df)
                print(f"‚úÖ Features pr√©par√©es: {len(feature_names)} features")
                
            else:
                print("‚ùå Aucune donn√©e r√©cup√©r√©e")
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du service: {e}")
            import traceback
            traceback.print_exc()
            return
        
        print("\nüéâ Tous les tests simples ont r√©ussi!")
        print("üí° Le service LightGBM est pr√™t pour l'entra√Ænement complet")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()

if __name__ == "__main__":
    test_lightgbm_simple()
