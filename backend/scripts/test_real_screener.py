#!/usr/bin/env python3
"""
Script de test pour le screener r√©el
"""
import requests
import time
import json

BASE_URL = "http://localhost:8000/api/v1/screener"

def test_real_screener():
    print("üöÄ Test du screener r√©el")
    
    # 1. Lancer le screener r√©el
    params = {
        "target_return_percentage": 1.5,
        "time_horizon_days": 7,
        "risk_tolerance": 0.6
    }
    print(f"üìã Param√®tres: {params}")
    
    print("\n1Ô∏è‚É£ Lancement du screener r√©el...")
    try:
        response = requests.post(f"{BASE_URL}/run-real", json=params)
        response.raise_for_status()
        task_info = response.json()
        task_id = task_info.get("task_id")
        print(f"‚úÖ Screener r√©el lanc√©. Task ID: {task_id}")
        print(f"   Statut initial: {task_info.get('status')}, Message: {task_info.get('message')}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur lors du lancement: {e}")
        if e.response:
            print(e.response.text)
        return
    
    if not task_id:
        print("‚ùå Pas de Task ID re√ßu.")
        return
    
    # 2. Suivre la progression de la t√¢che
    print("\n2Ô∏è‚É£ Suivi de la progression de la t√¢che...")
    status = ""
    progress = 0
    screener_run_id = None
    results = []
    
    start_time = time.time()
    last_progress = 0
    
    while status not in ["SUCCESS", "FAILURE"]:
        try:
            response = requests.get(f"{BASE_URL}/task/{task_id}/status")
            response.raise_for_status()
            task_status = response.json()
            
            status = task_status.get("state")
            meta = task_status.get("meta", {})
            progress = meta.get("progress", 0)
            current_status_message = meta.get("status", "En attente...")
            
            # Afficher seulement si la progression a chang√© significativement
            if progress - last_progress >= 5:
                print(f"   Progression: {progress}% - {current_status_message}")
                last_progress = progress
            
            if status == "SUCCESS":
                screener_run_id = meta.get("screener_run_id")
                results = meta.get("results", [])
                execution_time = time.time() - start_time
                print(f"‚úÖ T√¢che termin√©e avec succ√®s en {execution_time:.1f} secondes")
                print(f"   Screener Run ID: {screener_run_id}")
                print(f"   Opportunit√©s trouv√©es: {len(results)}")
                break
            elif status == "FAILURE":
                error_message = meta.get("error_message", "Erreur inconnue")
                print(f"‚ùå T√¢che √©chou√©e. Erreur: {error_message}")
                break
            
            # Timeout apr√®s 10 minutes
            if time.time() - start_time > 600:
                print("‚è∞ Timeout apr√®s 10 minutes")
                break
                
            time.sleep(5)  # Attendre 5 secondes avant de v√©rifier √† nouveau
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration du statut: {e}")
            if e.response:
                print(e.response.text)
            break
        except json.JSONDecodeError:
            print(f"‚ùå Erreur de d√©codage JSON pour le statut de la t√¢che {task_id}")
            break
    
    # 3. R√©cup√©rer les r√©sultats finaux si la t√¢che a r√©ussi
    if screener_run_id and status == "SUCCESS":
        print(f"\n3Ô∏è‚É£ R√©cup√©ration des r√©sultats finaux pour Screener Run ID: {screener_run_id}...")
        try:
            response = requests.get(f"{BASE_URL}/results/{screener_run_id}")
            response.raise_for_status()
            final_results = response.json()
            print(f"‚úÖ R√©sultats finaux r√©cup√©r√©s. {len(final_results)} opportunit√©s.")
            
            if final_results:
                print("\nüìä Top 5 des opportunit√©s:")
                for i, res in enumerate(final_results[:5]):
                    print(f"   {i+1}. {res['symbol']} - Confiance: {res['confidence']:.1%}")
            else:
                print("   Aucune opportunit√© trouv√©e avec les param√®tres actuels.")
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des r√©sultats finaux: {e}")
            if e.response:
                print(e.response.text)
    
    print("\nüéâ Test du screener r√©el termin√©.")

if __name__ == "__main__":
    test_real_screener()
