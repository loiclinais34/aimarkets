#!/usr/bin/env python3
"""
Script pour v√©rifier la persistance des opportunit√©s et les calculs r√©cents
"""

import sys
import os
from datetime import datetime, date
from typing import List, Dict, Any

# Ajouter le chemin du backend au PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker
from app.core.config import settings
from app.models.advanced_opportunities import AdvancedOpportunity

class OpportunitiesPersistenceChecker:
    """V√©rificateur de persistance des opportunit√©s"""
    
    def __init__(self):
        """Initialise le v√©rificateur"""
        self.engine = create_engine(settings.database_url)
        self.SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.engine)
        self.db = self.SessionLocal()
        
    def __del__(self):
        """Ferme la session de base de donn√©es"""
        if hasattr(self, 'db'):
            self.db.close()
    
    def check_opportunities_table(self) -> Dict[str, Any]:
        """V√©rifie l'√©tat de la table advanced_opportunities"""
        print("üîç V√©rification de la table advanced_opportunities")
        
        # Compter le total d'opportunit√©s
        total_count = self.db.query(AdvancedOpportunity).count()
        
        # Compter par date
        date_counts = self.db.query(
            func.date(AdvancedOpportunity.updated_at).label('date'),
            func.count(AdvancedOpportunity.id).label('count')
        ).group_by(func.date(AdvancedOpportunity.updated_at)).order_by(
            func.date(AdvancedOpportunity.updated_at).desc()
        ).limit(10).all()
        
        # Compter par symbole
        symbol_counts = self.db.query(
            AdvancedOpportunity.symbol,
            func.count(AdvancedOpportunity.id).label('count')
        ).group_by(AdvancedOpportunity.symbol).order_by(
            func.count(AdvancedOpportunity.id).desc()
        ).limit(10).all()
        
        # Compter par recommandation
        recommendation_counts = self.db.query(
            AdvancedOpportunity.recommendation,
            func.count(AdvancedOpportunity.id).label('count')
        ).group_by(AdvancedOpportunity.recommendation).all()
        
        # Compter par niveau de risque
        risk_counts = self.db.query(
            AdvancedOpportunity.risk_level,
            func.count(AdvancedOpportunity.id).label('count')
        ).group_by(AdvancedOpportunity.risk_level).all()
        
        # R√©cup√©rer les derni√®res opportunit√©s
        latest_opportunities = self.db.query(AdvancedOpportunity).order_by(
            AdvancedOpportunity.updated_at.desc()
        ).limit(5).all()
        
        print(f"üìä Total d'opportunit√©s: {total_count}")
        
        print(f"\nüìÖ Opportunit√©s par date (10 derni√®res):")
        for date_count in date_counts:
            print(f"  ‚Ä¢ {date_count.date}: {date_count.count} opportunit√©s")
        
        print(f"\nüè¢ Opportunit√©s par symbole (top 10):")
        for symbol_count in symbol_counts:
            print(f"  ‚Ä¢ {symbol_count.symbol}: {symbol_count.count} opportunit√©s")
        
        print(f"\nüìà Opportunit√©s par recommandation:")
        for rec_count in recommendation_counts:
            print(f"  ‚Ä¢ {rec_count.recommendation}: {rec_count.count} opportunit√©s")
        
        print(f"\n‚ö†Ô∏è Opportunit√©s par niveau de risque:")
        for risk_count in risk_counts:
            print(f"  ‚Ä¢ {risk_count.risk_level}: {risk_count.count} opportunit√©s")
        
        print(f"\nüïí 5 derni√®res opportunit√©s:")
        for opp in latest_opportunities:
            print(f"  ‚Ä¢ {opp.symbol}: {opp.recommendation} (score: {opp.composite_score:.3f}) - {opp.updated_at}")
        
        return {
            "total_count": total_count,
            "date_counts": [{"date": str(dc.date), "count": dc.count} for dc in date_counts],
            "symbol_counts": [{"symbol": sc.symbol, "count": sc.count} for sc in symbol_counts],
            "recommendation_counts": [{"recommendation": rc.recommendation, "count": rc.count} for rc in recommendation_counts],
            "risk_counts": [{"risk_level": rc.risk_level, "count": rc.count} for rc in risk_counts],
            "latest_opportunities": [
                {
                    "symbol": opp.symbol,
                    "recommendation": opp.recommendation,
                    "composite_score": float(opp.composite_score),
                    "updated_at": opp.updated_at.isoformat()
                }
                for opp in latest_opportunities
            ]
        }
    
    def check_today_opportunities(self) -> Dict[str, Any]:
        """V√©rifie les opportunit√©s d'aujourd'hui"""
        print("\nüîç V√©rification des opportunit√©s d'aujourd'hui")
        
        today = date.today()
        
        # Compter les opportunit√©s d'aujourd'hui
        today_count = self.db.query(AdvancedOpportunity).filter(
            func.date(AdvancedOpportunity.updated_at) == today
        ).count()
        
        # R√©cup√©rer les opportunit√©s d'aujourd'hui
        today_opportunities = self.db.query(AdvancedOpportunity).filter(
            func.date(AdvancedOpportunity.updated_at) == today
        ).order_by(AdvancedOpportunity.composite_score.desc()).all()
        
        print(f"üìÖ Opportunit√©s d'aujourd'hui ({today}): {today_count}")
        
        if today_opportunities:
            print(f"\nüèÜ Top 10 des opportunit√©s d'aujourd'hui:")
            for i, opp in enumerate(today_opportunities[:10], 1):
                print(f"  {i}. {opp.symbol}: {opp.recommendation} (score: {opp.composite_score:.3f}, confiance: {opp.confidence_level:.3f})")
        else:
            print("‚ùå Aucune opportunit√© trouv√©e pour aujourd'hui")
        
        return {
            "today": today.isoformat(),
            "count": today_count,
            "opportunities": [
                {
                    "symbol": opp.symbol,
                    "recommendation": opp.recommendation,
                    "composite_score": float(opp.composite_score),
                    "confidence_level": float(opp.confidence_level),
                    "risk_level": opp.risk_level,
                    "updated_at": opp.updated_at.isoformat()
                }
                for opp in today_opportunities
            ]
        }
    
    def check_optimized_scores(self) -> Dict[str, Any]:
        """V√©rifie si les scores optimis√©s sont pr√©sents"""
        print("\nüîç V√©rification des scores optimis√©s")
        
        # V√©rifier les nouvelles cat√©gories de recommandation
        new_recommendations = ["BUY_STRONG", "BUY_MODERATE", "BUY_WEAK", "SELL_STRONG", "SELL_MODERATE"]
        
        optimized_count = self.db.query(AdvancedOpportunity).filter(
            AdvancedOpportunity.recommendation.in_(new_recommendations)
        ).count()
        
        print(f"üìä Opportunit√©s avec recommandations optimis√©es: {optimized_count}")
        
        # V√©rifier les scores composite √©lev√©s (> 0.6)
        high_scores_count = self.db.query(AdvancedOpportunity).filter(
            AdvancedOpportunity.composite_score > 0.6
        ).count()
        
        print(f"üìà Opportunit√©s avec score composite > 0.6: {high_scores_count}")
        
        # V√©rifier les niveaux de confiance √©lev√©s (> 0.8)
        high_confidence_count = self.db.query(AdvancedOpportunity).filter(
            AdvancedOpportunity.confidence_level > 0.8
        ).count()
        
        print(f"üéØ Opportunit√©s avec confiance > 0.8: {high_confidence_count}")
        
        return {
            "optimized_recommendations_count": optimized_count,
            "high_scores_count": high_scores_count,
            "high_confidence_count": high_confidence_count
        }

def main():
    """Fonction principale"""
    print("üöÄ V√©rification de la persistance des opportunit√©s")
    print("=" * 60)
    
    checker = OpportunitiesPersistenceChecker()
    
    try:
        # V√©rification g√©n√©rale
        general_stats = checker.check_opportunities_table()
        
        # V√©rification d'aujourd'hui
        today_stats = checker.check_today_opportunities()
        
        # V√©rification des scores optimis√©s
        optimized_stats = checker.check_optimized_scores()
        
        # R√©sum√©
        print("\n" + "=" * 60)
        print("R√âSUM√â")
        print("=" * 60)
        
        print(f"üìä Total d'opportunit√©s: {general_stats['total_count']}")
        print(f"üìÖ Opportunit√©s d'aujourd'hui: {today_stats['count']}")
        print(f"üéØ Recommandations optimis√©es: {optimized_stats['optimized_recommendations_count']}")
        print(f"üìà Scores √©lev√©s (>0.6): {optimized_stats['high_scores_count']}")
        print(f"üéØ Confiance √©lev√©e (>0.8): {optimized_stats['high_confidence_count']}")
        
        if today_stats['count'] == 0:
            print("\n‚ö†Ô∏è ATTENTION: Aucune opportunit√© g√©n√©r√©e aujourd'hui!")
            print("üí° Suggestion: Utiliser l'endpoint /generate-daily-opportunities pour g√©n√©rer de nouvelles opportunit√©s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        del checker

if __name__ == "__main__":
    main()
