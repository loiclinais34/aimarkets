#!/usr/bin/env python3
"""
Script d'am√©lioration des cat√©gories de trading
Propose des am√©liorations concr√®tes bas√©es sur l'analyse des performances
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import json
import pandas as pd
import numpy as np
from typing import Dict, List, Tuple
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TradingCategoryImprover:
    """Am√©liorateur des cat√©gories de trading"""
    
    def __init__(self, analysis_file: str = "trading_categories_analysis.json"):
        self.analysis_file = os.path.join(os.path.dirname(__file__), analysis_file)
        self.data = self.load_analysis_data()
    
    def load_analysis_data(self) -> Dict:
        """Charge les donn√©es d'analyse"""
        try:
            with open(self.analysis_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"Fichier d'analyse non trouv√©: {self.analysis_file}")
            return {}
    
    def analyze_current_issues(self) -> Dict:
        """Analyse les probl√®mes actuels"""
        logger.info("üîç Analyse des probl√®mes actuels")
        
        performance = self.data.get("category_performance", {})
        
        issues = []
        recommendations = []
        
        # 1. Probl√®me de pr√©cision des signaux actifs
        buy_perf = performance.get("BUY_OPPORTUNITIES", {}).get("performance", {})
        sell_perf = performance.get("SELL_OPPORTUNITIES", {}).get("performance", {})
        
        if buy_perf.get("accuracy", 0) < 30:
            issues.append(f"Pr√©cision BUY trop faible: {buy_perf.get('accuracy', 0):.1f}%")
            recommendations.append("Am√©liorer la qualit√© des signaux d'achat")
        
        if sell_perf.get("accuracy", 0) < 30:
            issues.append(f"Pr√©cision SELL trop faible: {sell_perf.get('accuracy', 0):.1f}%")
            recommendations.append("Am√©liorer la qualit√© des signaux de vente")
        
        # 2. Probl√®me de retours n√©gatifs pour BUY
        if buy_perf.get("avg_return", 0) < 0:
            issues.append(f"Retours moyens n√©gatifs pour BUY: {buy_perf.get('avg_return', 0):.2f}%")
            recommendations.append("Revoir la logique de scoring pour les opportunit√©s d'achat")
        
        # 3. D√©s√©quilibre des classes
        buy_count = performance.get("BUY_OPPORTUNITIES", {}).get("count", 0)
        sell_count = performance.get("SELL_OPPORTUNITIES", {}).get("count", 0)
        hold_count = performance.get("HOLD", {}).get("count", 0)
        total = buy_count + sell_count + hold_count
        
        if total > 0:
            buy_pct = (buy_count / total) * 100
            sell_pct = (sell_count / total) * 100
            hold_pct = (hold_count / total) * 100
            
            if hold_pct > 90:
                issues.append(f"D√©s√©quilibre majeur: {hold_pct:.1f}% HOLD vs {buy_pct:.1f}% BUY + {sell_pct:.1f}% SELL")
                recommendations.append("Ajuster les seuils de d√©cision pour √©quilibrer les cat√©gories")
        
        return {
            "issues": issues,
            "recommendations": recommendations,
            "current_distribution": {
                "HOLD": hold_pct if total > 0 else 0,
                "BUY_OPPORTUNITIES": buy_pct if total > 0 else 0,
                "SELL_OPPORTUNITIES": sell_pct if total > 0 else 0
            }
        }
    
    def propose_improved_categories(self) -> Dict:
        """Propose des cat√©gories am√©lior√©es"""
        logger.info("üí° Proposition de cat√©gories am√©lior√©es")
        
        # Cat√©gories am√©lior√©es bas√©es sur l'analyse
        improved_categories = {
            "HOLD_STABLE": {
                "description": "Maintenir la position - march√© stable",
                "action": "Ne rien faire",
                "context": "Portefeuille √©quilibr√©, conditions de march√© stables",
                "expected_frequency": "60-70%",
                "risk_level": "LOW",
                "improvement": "S√©parer HOLD stable de HOLD temporaire"
            },
            "HOLD_TEMPORARY": {
                "description": "Maintenir la position - attente de signal",
                "action": "Surveiller et attendre",
                "context": "Conditions incertaines, attente de clarification",
                "expected_frequency": "15-20%",
                "risk_level": "LOW-MEDIUM",
                "improvement": "Cat√©gorie interm√©diaire pour les cas ambigus"
            },
            "BUY_STRONG": {
                "description": "Opportunit√© d'achat forte",
                "action": "Acheter avec conviction",
                "context": "Signaux techniques et fondamentaux align√©s",
                "expected_frequency": "8-12%",
                "risk_level": "MEDIUM",
                "improvement": "Filtrer les meilleures opportunit√©s d'achat"
            },
            "BUY_MODERATE": {
                "description": "Opportunit√© d'achat mod√©r√©e",
                "action": "Acheter avec prudence",
                "context": "Signaux positifs mais avec r√©serves",
                "expected_frequency": "5-8%",
                "risk_level": "MEDIUM-HIGH",
                "improvement": "Position sizing r√©duit pour ces opportunit√©s"
            },
            "SELL_PROFIT": {
                "description": "Vente pour prise de profits",
                "action": "Vendre partiellement ou totalement",
                "context": "Objectifs de profit atteints",
                "expected_frequency": "3-5%",
                "risk_level": "LOW",
                "improvement": "Strat√©gie de sortie bas√©e sur les objectifs"
            },
            "SELL_RISK": {
                "description": "Vente pour gestion du risque",
                "action": "Vendre pour limiter les pertes",
                "context": "Signaux de risque d√©tect√©s",
                "expected_frequency": "2-4%",
                "risk_level": "HIGH",
                "improvement": "Stop-loss automatique bas√© sur les signaux"
            }
        }
        
        return improved_categories
    
    def propose_scoring_improvements(self) -> Dict:
        """Propose des am√©liorations du scoring"""
        logger.info("üìä Proposition d'am√©liorations du scoring")
        
        improvements = {
            "composite_score_thresholds": {
                "HOLD_STABLE": {
                    "min_score": 0.45,
                    "max_score": 0.55,
                    "description": "Zone de stabilit√© - pas d'action requise"
                },
                "HOLD_TEMPORARY": {
                    "min_score": 0.40,
                    "max_score": 0.60,
                    "description": "Zone d'incertitude - surveillance accrue"
                },
                "BUY_STRONG": {
                    "min_score": 0.70,
                    "max_score": 1.00,
                    "description": "Signaux forts - action recommand√©e"
                },
                "BUY_MODERATE": {
                    "min_score": 0.60,
                    "max_score": 0.70,
                    "description": "Signaux mod√©r√©s - action prudente"
                },
                "SELL_PROFIT": {
                    "min_score": 0.00,
                    "max_score": 0.30,
                    "description": "Signaux de vente pour profits"
                },
                "SELL_RISK": {
                    "min_score": 0.00,
                    "max_score": 0.25,
                    "description": "Signaux de vente pour risque"
                }
            },
            "confidence_levels": {
                "HIGH": {
                    "min_confidence": 0.8,
                    "action": "Ex√©cution imm√©diate",
                    "position_sizing": "Taille normale"
                },
                "MEDIUM": {
                    "min_confidence": 0.6,
                    "action": "Ex√©cution avec prudence",
                    "position_sizing": "Taille r√©duite"
                },
                "LOW": {
                    "min_confidence": 0.4,
                    "action": "Surveillance uniquement",
                    "position_sizing": "Pas d'action"
                }
            },
            "risk_adjustments": {
                "volatility_factor": "Ajuster les scores selon la volatilit√© historique",
                "market_regime": "Modifier les seuils selon le r√©gime de march√©",
                "sector_rotation": "Consid√©rer les rotations sectorielles",
                "macro_conditions": "Int√©grer les conditions macro√©conomiques"
            }
        }
        
        return improvements
    
    def propose_ml_improvements(self) -> Dict:
        """Propose des am√©liorations ML sp√©cifiques"""
        logger.info("ü§ñ Proposition d'am√©liorations ML")
        
        ml_improvements = {
            "class_balancing": {
                "technique": "SMOTE + Undersampling",
                "target_distribution": {
                    "HOLD_STABLE": 60,
                    "HOLD_TEMPORARY": 15,
                    "BUY_STRONG": 10,
                    "BUY_MODERATE": 8,
                    "SELL_PROFIT": 4,
                    "SELL_RISK": 3
                },
                "description": "√âquilibrer les classes pour √©viter le biais HOLD"
            },
            "feature_engineering": {
                "technical_features": [
                    "Scores techniques normalis√©s",
                    "Momentum sur diff√©rentes p√©riodes",
                    "Volatilit√© relative",
                    "Support/r√©sistance proximity"
                ],
                "sentiment_features": [
                    "Sentiment score normalis√©",
                    "Confidence du sentiment",
                    "Trend du sentiment",
                    "Volatilit√© du sentiment"
                ],
                "market_features": [
                    "R√©gime de march√©",
                    "Corr√©lations sectorielles",
                    "Volatilit√© du march√©",
                    "Liquidit√© relative"
                ],
                "temporal_features": [
                    "Jour de la semaine",
                    "Mois de l'ann√©e",
                    "Proximit√© des √©v√©nements",
                    "Saisonnalit√© historique"
                ]
            },
            "model_architecture": {
                "primary_model": "XGBoost avec validation crois√©e temporelle",
                "secondary_model": "Neural Network pour capturer les interactions",
                "ensemble_method": "Stacking avec m√©ta-apprentissage",
                "confidence_model": "S√©par√© pour estimer la fiabilit√©"
            },
            "training_strategy": {
                "validation": "TimeSeriesSplit pour √©viter le data leakage",
                "metrics": "F1-score pond√©r√© + Sharpe ratio",
                "regularization": "Early stopping + L1/L2 regularization",
                "hyperparameter_tuning": "Optuna avec validation crois√©e"
            }
        }
        
        return ml_improvements
    
    def propose_implementation_plan(self) -> Dict:
        """Propose un plan d'impl√©mentation"""
        logger.info("üìã Proposition de plan d'impl√©mentation")
        
        plan = {
            "phase_1": {
                "title": "Am√©lioration des seuils de d√©cision",
                "duration": "1-2 semaines",
                "tasks": [
                    "Ajuster les seuils de composite_score",
                    "Impl√©menter les nouvelles cat√©gories",
                    "Tester sur les donn√©es historiques",
                    "Valider les performances"
                ],
                "expected_improvement": "R√©duction du d√©s√©quilibre des classes"
            },
            "phase_2": {
                "title": "Am√©lioration du scoring",
                "duration": "2-3 semaines",
                "tasks": [
                    "Int√©grer les facteurs de risque",
                    "Am√©liorer la logique de confiance",
                    "Impl√©menter les ajustements temporels",
                    "Valider sur backtesting"
                ],
                "expected_improvement": "Am√©lioration de la pr√©cision des signaux"
            },
            "phase_3": {
                "title": "Impl√©mentation ML",
                "duration": "4-6 semaines",
                "tasks": [
                    "D√©velopper le pipeline ML",
                    "Impl√©menter le r√©√©chantillonnage",
                    "Entra√Æner les mod√®les",
                    "Valider les performances"
                ],
                "expected_improvement": "Optimisation globale des performances"
            },
            "phase_4": {
                "title": "D√©ploiement et monitoring",
                "duration": "2-3 semaines",
                "tasks": [
                    "D√©ployer en production",
                    "Mettre en place le monitoring",
                    "Impl√©menter l'A/B testing",
                    "Optimiser en continu"
                ],
                "expected_improvement": "Stabilit√© et am√©lioration continue"
            }
        }
        
        return plan
    
    def run_complete_analysis(self) -> Dict:
        """Ex√©cute l'analyse compl√®te d'am√©lioration"""
        logger.info("üöÄ D√©marrage de l'analyse d'am√©lioration compl√®te")
        
        try:
            self.results = {
                "current_issues": self.analyze_current_issues(),
                "improved_categories": self.propose_improved_categories(),
                "scoring_improvements": self.propose_scoring_improvements(),
                "ml_improvements": self.propose_ml_improvements(),
                "implementation_plan": self.propose_implementation_plan()
            }
            
            return self.results
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'analyse: {e}")
            raise
    
    def print_summary(self):
        """Affiche un r√©sum√© des am√©liorations propos√©es"""
        if not self.results:
            logger.warning("Aucun r√©sultat √† afficher")
            return
        
        issues = self.results["current_issues"]
        categories = self.results["improved_categories"]
        plan = self.results["implementation_plan"]
        
        print("\n" + "="*80)
        print("üöÄ AM√âLIORATIONS PROPOS√âES POUR LES CAT√âGORIES DE TRADING")
        print("="*80)
        
        print(f"\nüîç PROBL√àMES IDENTIFI√âS:")
        for i, issue in enumerate(issues["issues"], 1):
            print(f"  {i}. {issue}")
        
        print(f"\nüí° CAT√âGORIES AM√âLIOR√âES:")
        for category, info in categories.items():
            print(f"  ‚Ä¢ {category}: {info['description']}")
            print(f"    Action: {info['action']}")
            print(f"    Fr√©quence: {info['expected_frequency']}")
            print(f"    Am√©lioration: {info['improvement']}\n")
        
        print(f"üìã PLAN D'IMPL√âMENTATION:")
        for phase, details in plan.items():
            print(f"  {phase.upper()}: {details['title']}")
            print(f"    Dur√©e: {details['duration']}")
            print(f"    Am√©lioration attendue: {details['expected_improvement']}")
            print(f"    T√¢ches principales:")
            for task in details['tasks']:
                print(f"      - {task}")
            print()
        
        print("="*80)


def main():
    """Fonction principale"""
    
    logger.info("üöÄ D√©marrage de l'analyse d'am√©lioration des cat√©gories")
    
    try:
        # Cr√©er l'analyseur
        improver = TradingCategoryImprover()
        
        # Ex√©cuter l'analyse
        results = improver.run_complete_analysis()
        
        # Afficher le r√©sum√©
        improver.print_summary()
        
        # Sauvegarder les r√©sultats
        output_file = os.path.join(os.path.dirname(__file__), "trading_categories_improvements.json")
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        
        logger.info(f"üìÅ Am√©liorations sauvegard√©es dans {output_file}")
        logger.info("‚úÖ Analyse d'am√©lioration termin√©e avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        import traceback
        traceback.print_exc()
        raise


if __name__ == "__main__":
    main()
