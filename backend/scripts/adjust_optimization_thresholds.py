#!/usr/bin/env python3
"""
Script pour ajuster les seuils d'optimisation pour qu'ils soient plus r√©alistes
"""

import sys
import os
from datetime import datetime
from typing import Dict, Any
import json

# Ajouter le chemin du backend au PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

class OptimizationThresholdsAdjuster:
    """Ajusteur des seuils d'optimisation"""
    
    def __init__(self):
        """Initialise l'ajusteur"""
        self.advanced_analysis_file = "app/services/advanced_analysis/advanced_trading_analysis.py"
        
    def generate_adjusted_thresholds(self) -> str:
        """G√©n√®re les seuils ajust√©s plus r√©alistes"""
        
        # Seuils ajust√©s bas√©s sur l'analyse des donn√©es r√©elles
        # Les seuils pr√©c√©dents √©taient trop stricts (0.533, 0.651, 0.6)
        # Ajustons-les pour √™tre plus r√©alistes tout en gardant la qualit√©
        
        TECH_THRESHOLD = 0.45  # R√©duit de 0.533 √† 0.45
        COMP_THRESHOLD = 0.50  # R√©duit de 0.651 √† 0.50
        CONF_THRESHOLD = 0.6   # Maintenu √† 0.6
        
        methods_code = f'''
    def _calculate_adjusted_optimized_composite_score(
        self, 
        technical_score: float, 
        sentiment_score: float, 
        market_score: float, 
        ml_score: float = 0.0,
        candlestick_score: float = 0.0,
        garch_score: float = 0.0,
        monte_carlo_score: float = 0.0,
        markov_score: float = 0.0,
        volatility_score: float = 0.0
    ) -> float:
        """
        Calcule le score composite avec priorit√© au score technique (80%)
        Seuils ajust√©s pour √™tre plus r√©alistes
        """
        try:
            # Poids optimis√©s - priorit√© forte au score technique
            priority_weights = {{
                'technical': 0.8,      # 80% - priorit√© maximale
                'sentiment': 0.1,      # 10%
                'market': 0.1          # 10%
            }}
            
            # Score composite avec priorit√© technique
            composite_score = (
                priority_weights['technical'] * technical_score +
                priority_weights['sentiment'] * sentiment_score +
                priority_weights['market'] * market_score
            )
            
            return round(composite_score, 4)
            
        except Exception as e:
            self.logger.error(f"Error calculating adjusted optimized composite score: {{e}}")
            return 0.5
    
    def _determine_adjusted_optimized_recommendation(
        self, 
        composite_score: float, 
        technical_score: float,
        confidence_level: float
    ) -> str:
        """
        D√©termine la recommandation avec les seuils ajust√©s
        Seuils plus r√©alistes bas√©s sur l'analyse des donn√©es
        """
        try:
            # Seuils ajust√©s plus r√©alistes
            TECH_THRESHOLD = {TECH_THRESHOLD}
            COMP_THRESHOLD = {COMP_THRESHOLD}
            CONF_THRESHOLD = {CONF_THRESHOLD}
            
            # Validation des seuils ajust√©s
            tech_valid = technical_score >= TECH_THRESHOLD
            comp_valid = composite_score >= COMP_THRESHOLD
            conf_valid = confidence_level >= CONF_THRESHOLD
            
            # Logique de recommandation avec seuils ajust√©s
            if comp_valid and tech_valid and conf_valid:
                return "BUY_STRONG"
            elif comp_valid and tech_valid:
                return "BUY_MODERATE"
            elif comp_valid or tech_valid:
                return "BUY_WEAK"
            elif composite_score >= 0.4:
                return "HOLD"
            else:
                return "SELL_MODERATE"
                
        except Exception as e:
            self.logger.error(f"Error determining adjusted optimized recommendation: {{e}}")
            return "HOLD"
    
    def _validate_adjusted_optimized_signals(
        self, 
        technical_score: float, 
        composite_score: float,
        confidence_level: float
    ) -> Dict[str, bool]:
        """
        Valide les signaux avec les seuils ajust√©s
        Seuils plus r√©alistes pour une meilleure s√©lection
        """
        validation = {{
            "technical_threshold_met": False,
            "composite_threshold_met": False,
            "confidence_threshold_met": False,
            "overall_valid": False
        }}
        
        try:
            # Seuils ajust√©s
            TECH_THRESHOLD = {TECH_THRESHOLD}
            COMP_THRESHOLD = {COMP_THRESHOLD}
            CONF_THRESHOLD = {CONF_THRESHOLD}
            
            # Validation des seuils
            validation["technical_threshold_met"] = technical_score >= TECH_THRESHOLD
            validation["composite_threshold_met"] = composite_score >= COMP_THRESHOLD
            validation["confidence_threshold_met"] = confidence_level >= CONF_THRESHOLD
            
            # Validation globale : au moins 2 crit√®res sur 3
            valid_criteria = sum(1 for k, v in validation.items() if k != "overall_valid" and v)
            validation["overall_valid"] = valid_criteria >= 2
            
        except Exception as e:
            self.logger.warning(f"Erreur lors de la validation ajust√©e: {{e}}")
        
        return validation
    
    def _apply_adjusted_optimized_filtering(
        self, 
        technical_score: float, 
        composite_score: float,
        confidence_level: float
    ) -> bool:
        """
        Applique le filtrage ajust√© pour ne garder que les opportunit√©s de qualit√©
        Seuils plus r√©alistes pour une meilleure s√©lection
        """
        try:
            # Seuils ajust√©s
            TECH_THRESHOLD = {TECH_THRESHOLD}
            COMP_THRESHOLD = {COMP_THRESHOLD}
            CONF_THRESHOLD = {CONF_THRESHOLD}
            
            # Validation des signaux
            validation = self._validate_adjusted_optimized_signals(
                technical_score, composite_score, confidence_level
            )
            
            # Filtrage ajust√© : au moins 2 crit√®res sur 3
            return validation["overall_valid"]
            
        except Exception as e:
            self.logger.warning(f"Erreur lors du filtrage ajust√©: {{e}}")
            return False
'''
        
        return methods_code
    
    def implement_adjusted_thresholds(self):
        """Impl√©mente les seuils ajust√©s"""
        print("üîß Impl√©mentation des seuils d'optimisation ajust√©s...")
        
        # Lire le fichier AdvancedTradingAnalysis
        try:
            with open(self.advanced_analysis_file, 'r', encoding='utf-8') as f:
                content = f.read()
        except FileNotFoundError:
            print(f"‚ùå Fichier {self.advanced_analysis_file} non trouv√©")
            return False
        
        # V√©rifier si les m√©thodes ajust√©es existent d√©j√†
        if "_calculate_adjusted_optimized_composite_score" in content:
            print("‚ö†Ô∏è Les m√©thodes ajust√©es existent d√©j√†")
            return True
        
        # G√©n√©rer le code des m√©thodes ajust√©es
        adjusted_methods = self.generate_adjusted_thresholds()
        
        # Trouver le point d'insertion (avant la m√©thode analyze_opportunity)
        insertion_point = "    async def analyze_opportunity"
        if insertion_point not in content:
            print("‚ùå Point d'insertion non trouv√©")
            return False
        
        # Ins√©rer les m√©thodes ajust√©es
        new_content = content.replace(
            insertion_point,
            adjusted_methods + "\n" + insertion_point
        )
        
        # Sauvegarder le fichier modifi√©
        try:
            with open(self.advanced_analysis_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            print("‚úÖ M√©thodes ajust√©es impl√©ment√©es avec succ√®s")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False
    
    def update_analyze_opportunity_method(self):
        """Met √† jour la m√©thode analyze_opportunity pour utiliser les seuils ajust√©s"""
        print("üîÑ Mise √† jour de la m√©thode analyze_opportunity avec les seuils ajust√©s...")
        
        try:
            with open(self.advanced_analysis_file, 'r', encoding='utf-8') as f:
                content = f.read()
        except FileNotFoundError:
            print(f"‚ùå Fichier {self.advanced_analysis_file} non trouv√©")
            return False
        
        # Remplacer les appels aux m√©thodes optimis√©es par les m√©thodes ajust√©es
        replacements = [
            ("_calculate_priority_optimized_composite_score", "_calculate_adjusted_optimized_composite_score"),
            ("_determine_priority_optimized_recommendation", "_determine_adjusted_optimized_recommendation"),
            ("_validate_priority_optimized_signals", "_validate_adjusted_optimized_signals"),
            ("_apply_priority_optimized_filtering", "_apply_adjusted_optimized_filtering")
        ]
        
        for old_method, new_method in replacements:
            if old_method in content:
                content = content.replace(old_method, new_method)
                print(f"‚úÖ {old_method} remplac√© par {new_method}")
            else:
                print(f"‚ö†Ô∏è {old_method} non trouv√©")
        
        # Sauvegarder le fichier modifi√©
        try:
            with open(self.advanced_analysis_file, 'w', encoding='utf-8') as f:
                f.write(content)
            print("‚úÖ M√©thode analyze_opportunity mise √† jour")
            return True
        except Exception as e:
            print(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False
    
    def run_adjustment(self):
        """Ex√©cute l'ajustement complet"""
        print("üöÄ D√©marrage de l'ajustement des seuils d'optimisation")
        print("=" * 80)
        
        # Impl√©menter les m√©thodes ajust√©es
        if not self.implement_adjusted_thresholds():
            return False
        
        # Mettre √† jour la m√©thode analyze_opportunity
        if not self.update_analyze_opportunity_method():
            return False
        
        print("\n‚úÖ Ajustement termin√© avec succ√®s")
        print("\nüìä R√âSUM√â DES SEUILS AJUST√âS:")
        print("  ‚Ä¢ Seuil technique: 0.45 (r√©duit de 0.533)")
        print("  ‚Ä¢ Seuil composite: 0.50 (r√©duit de 0.651)")
        print("  ‚Ä¢ Seuil confiance: 0.6 (maintenu)")
        print("  ‚Ä¢ Poids technique: 80% (maintenu)")
        print("  ‚Ä¢ Validation: au moins 2 crit√®res sur 3 (maintenu)")
        
        return True

def main():
    """Fonction principale"""
    adjuster = OptimizationThresholdsAdjuster()
    
    try:
        success = adjuster.run_adjustment()
        if success:
            print("\nüéØ Les seuils d'optimisation ont √©t√© ajust√©s avec succ√®s!")
            print("   Les seuils sont maintenant plus r√©alistes et permettront de g√©n√©rer des opportunit√©s.")
        else:
            print("\n‚ùå √âchec de l'ajustement")
    
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajustement: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
