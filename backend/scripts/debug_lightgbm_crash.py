#!/usr/bin/env python3
"""
Script de diagnostic pour identifier les probl√®mes de crash LightGBM
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from datetime import date, datetime
from sqlalchemy.orm import Session
from app.core.database import get_db
from app.models.database import TargetParameters, MLModels, HistoricalData, TechnicalIndicators, SentimentIndicators

def debug_lightgbm_crash():
    """Diagnostic des probl√®mes de crash LightGBM"""
    print("üîç Diagnostic des probl√®mes de crash LightGBM...")
    
    # R√©cup√©ration de la session de base de donn√©es
    db = next(get_db())
    
    try:
        # Test 1: V√©rification de la connexion √† la base de donn√©es
        print("\n1Ô∏è‚É£ Test de connexion √† la base de donn√©es...")
        target_param = db.query(TargetParameters).filter(TargetParameters.id == 5).first()
        if target_param:
            print(f"‚úÖ Param√®tre cible trouv√©: {target_param.parameter_name}")
        else:
            print("‚ùå Param√®tre cible ID 5 non trouv√©")
            return
        
        # Test 2: V√©rification des donn√©es disponibles
        print("\n2Ô∏è‚É£ V√©rification des donn√©es disponibles...")
        
        # V√©rifier les donn√©es historiques
        hist_count = db.query(HistoricalData).filter(HistoricalData.symbol == "AAPL").count()
        print(f"   - Donn√©es historiques AAPL: {hist_count} enregistrements")
        
        # V√©rifier les indicateurs techniques
        tech_count = db.query(TechnicalIndicators).filter(TechnicalIndicators.symbol == "AAPL").count()
        print(f"   - Indicateurs techniques AAPL: {tech_count} enregistrements")
        
        # V√©rifier les indicateurs de sentiment
        sent_count = db.query(SentimentIndicators).filter(SentimentIndicators.symbol == "AAPL").count()
        print(f"   - Indicateurs de sentiment AAPL: {sent_count} enregistrements")
        
        if hist_count < 100 or tech_count < 100 or sent_count < 100:
            print("‚ùå Pas assez de donn√©es pour l'entra√Ænement")
            return
        
        # Test 3: Test d'import de LightGBM
        print("\n3Ô∏è‚É£ Test d'import de LightGBM...")
        try:
            import lightgbm as lgb
            print(f"‚úÖ LightGBM import√© avec succ√®s (version {lgb.__version__})")
        except Exception as e:
            print(f"‚ùå Erreur d'import LightGBM: {e}")
            return
        
        # Test 4: Test de cr√©ation du service LightGBM
        print("\n4Ô∏è‚É£ Test de cr√©ation du service LightGBM...")
        try:
            from app.services.lightgbm_service import LightGBMService
            service = LightGBMService(db)
            print("‚úÖ Service LightGBM cr√©√© avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du service: {e}")
            import traceback
            traceback.print_exc()
            return
        
        # Test 5: Test de r√©cup√©ration des donn√©es avec jointures
        print("\n5Ô∏è‚É£ Test de r√©cup√©ration des donn√©es avec jointures...")
        try:
            # R√©cup√©rer les donn√©es avec jointures
            query = db.query(HistoricalData, TechnicalIndicators, SentimentIndicators).join(
                TechnicalIndicators, 
                (HistoricalData.symbol == TechnicalIndicators.symbol) & 
                (HistoricalData.date == TechnicalIndicators.date)
            ).join(
                SentimentIndicators, 
                (HistoricalData.symbol == SentimentIndicators.symbol) & 
                (HistoricalData.date == SentimentIndicators.date)
            ).filter(
                HistoricalData.symbol == "AAPL"
            ).order_by(HistoricalData.date).limit(50)  # Limiter √† 50 pour √©viter les probl√®mes de m√©moire
            
            results = query.all()
            print(f"   - {len(results)} enregistrements r√©cup√©r√©s")
            
            if len(results) < 10:
                print("‚ùå Pas assez de donn√©es pour l'entra√Ænement")
                return
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des donn√©es: {e}")
            import traceback
            traceback.print_exc()
            return
        
        # Test 6: Test de conversion en DataFrame
        print("\n6Ô∏è‚É£ Test de conversion en DataFrame...")
        try:
            import pandas as pd
            
            data = []
            for hist, tech, sent in results:
                row = {
                    'date': hist.date,
                    'symbol': hist.symbol,
                    'close': float(hist.close),
                    'open': float(hist.open),
                    'high': float(hist.high),
                    'low': float(hist.low),
                    'volume': float(hist.volume),
                    
                    # Indicateurs techniques
                    'sma_5': float(tech.sma_5) if tech.sma_5 else 0,
                    'sma_10': float(tech.sma_10) if tech.sma_10 else 0,
                    'sma_20': float(tech.sma_20) if tech.sma_20 else 0,
                    'rsi_14': float(tech.rsi_14) if tech.rsi_14 else 0,
                    'macd': float(tech.macd) if tech.macd else 0,
                    'bb_upper': float(tech.bb_upper) if tech.bb_upper else 0,
                    'bb_lower': float(tech.bb_lower) if tech.bb_lower else 0,
                    'atr_14': float(tech.atr_14) if tech.atr_14 else 0,
                    'obv': float(tech.obv) if tech.obv else 0,
                    
                    # Indicateurs de sentiment
                    'sentiment_score_normalized': float(sent.sentiment_score_normalized) if sent.sentiment_score_normalized else 0,
                    'sentiment_momentum_1d': float(sent.sentiment_momentum_1d) if sent.sentiment_momentum_1d else 0,
                    'sentiment_volatility_3d': float(sent.sentiment_volatility_3d) if sent.sentiment_volatility_3d else 0,
                    'news_positive_ratio': float(sent.news_positive_ratio) if sent.news_positive_ratio else 0,
                }
                data.append(row)
            
            df = pd.DataFrame(data)
            print(f"‚úÖ DataFrame cr√©√© avec {len(df)} lignes et {len(df.columns)} colonnes")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la conversion en DataFrame: {e}")
            import traceback
            traceback.print_exc()
            return
        
        # Test 7: Test de cr√©ation des labels
        print("\n7Ô∏è‚É£ Test de cr√©ation des labels...")
        try:
            df_with_labels = service.create_advanced_labels(df, target_param)
            print(f"‚úÖ Labels cr√©√©s avec succ√®s")
            print(f"   - Donn√©es avec labels: {len(df_with_labels)} lignes")
            
            # V√©rifier la distribution des labels
            if 'target_achieved' in df_with_labels.columns:
                target_dist = df_with_labels['target_achieved'].value_counts()
                print(f"   - Distribution des labels: {target_dist.to_dict()}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation des labels: {e}")
            import traceback
            traceback.print_exc()
            return
        
        # Test 8: Test de pr√©paration des features
        print("\n8Ô∏è‚É£ Test de pr√©paration des features...")
        try:
            X, feature_names = service.prepare_features(df_with_labels)
            print(f"‚úÖ Features pr√©par√©es: {len(feature_names)} features")
            print(f"   - Shape des donn√©es: {X.shape}")
            
            # V√©rifier qu'il n'y a pas de valeurs NaN
            nan_count = pd.isna(X).sum().sum()
            if nan_count > 0:
                print(f"‚ö†Ô∏è  {nan_count} valeurs NaN d√©tect√©es, remplacement par 0")
                X = X.fillna(0)
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la pr√©paration des features: {e}")
            import traceback
            traceback.print_exc()
            return
        
        # Test 9: Test d'entra√Ænement minimal
        print("\n9Ô∏è‚É£ Test d'entra√Ænement minimal...")
        try:
            import lightgbm as lgb
            import numpy as np
            
            # Pr√©parer les donn√©es pour LightGBM
            y = df_with_labels['target_achieved'].values if 'target_achieved' in df_with_labels.columns else np.random.randint(0, 2, len(X))
            
            # Cr√©er un dataset LightGBM
            train_data = lgb.Dataset(X, label=y)
            
            # Param√®tres pour un mod√®le simple
            params = {
                'objective': 'binary',
                'metric': 'binary_logloss',
                'verbose': -1,
                'num_leaves': 31,
                'learning_rate': 0.1,
                'feature_fraction': 0.9,
                'bagging_fraction': 0.8,
                'bagging_freq': 5,
                'min_data_in_leaf': 20
            }
            
            # Entra√Æner le mod√®le
            model = lgb.train(params, train_data, num_boost_round=10)  # R√©duire le nombre de rounds
            print("‚úÖ Mod√®le LightGBM entra√Æn√© avec succ√®s")
            
            # Test de pr√©diction
            predictions = model.predict(X[:5])
            print(f"‚úÖ Pr√©dictions effectu√©es: {predictions[:3]}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
            import traceback
            traceback.print_exc()
            return
        
        print("\nüéâ Tous les tests de diagnostic ont r√©ussi!")
        print("üí° Le probl√®me ne semble pas venir des composants de base")
        print("üîç Le probl√®me pourrait venir de l'endpoint API ou de la gestion des erreurs")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        db.close()

if __name__ == "__main__":
    debug_lightgbm_crash()
