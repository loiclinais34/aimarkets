#!/usr/bin/env python3
"""
Script pour g√©n√©rer plus d'indicateurs techniques et de sentiment
pour permettre l'entra√Ænement ML
"""
import requests
import time
import json
from datetime import datetime, timedelta

BASE_URL = "http://localhost:8000/api/v1"

def generate_indicators_for_symbol(symbol: str):
    """G√©n√©rer les indicateurs pour un symbole"""
    print(f"üîÑ G√©n√©ration des indicateurs pour {symbol}...")
    
    try:
        # R√©cup√©rer les donn√©es historiques
        response = requests.get(f"{BASE_URL}/data/historical/{symbol}")
        response.raise_for_status()
        historical_data = response.json()
        
        if len(historical_data) < 30:
            print(f"‚ö†Ô∏è {symbol}: Pas assez de donn√©es historiques ({len(historical_data)} < 30)")
            return False
        
        print(f"üìä {symbol}: {len(historical_data)} enregistrements historiques")
        
        # G√©n√©rer les indicateurs techniques
        print(f"üîß G√©n√©ration des indicateurs techniques pour {symbol}...")
        tech_response = requests.post(f"{BASE_URL}/data/generate-technical/{symbol}")
        if tech_response.status_code == 200:
            print(f"‚úÖ {symbol}: Indicateurs techniques g√©n√©r√©s")
        else:
            print(f"‚ùå {symbol}: Erreur g√©n√©ration indicateurs techniques - {tech_response.status_code}")
        
        # G√©n√©rer les indicateurs de sentiment
        print(f"üìà G√©n√©ration des indicateurs de sentiment pour {symbol}...")
        sentiment_response = requests.post(f"{BASE_URL}/data/generate-sentiment/{symbol}")
        if sentiment_response.status_code == 200:
            print(f"‚úÖ {symbol}: Indicateurs de sentiment g√©n√©r√©s")
        else:
            print(f"‚ùå {symbol}: Erreur g√©n√©ration indicateurs de sentiment - {sentiment_response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå {symbol}: Erreur - {e}")
        return False

def generate_indicators_for_multiple_symbols(symbols: list):
    """G√©n√©rer les indicateurs pour plusieurs symboles"""
    print(f"üöÄ G√©n√©ration des indicateurs pour {len(symbols)} symboles...")
    
    successful = 0
    for i, symbol in enumerate(symbols):
        print(f"\nüìä Progression: {i+1}/{len(symbols)}")
        if generate_indicators_for_symbol(symbol):
            successful += 1
        time.sleep(1)  # Pause entre les symboles
    
    print(f"\nüéâ G√©n√©ration termin√©e: {successful}/{len(symbols)} symboles trait√©s avec succ√®s")
    return successful

def main():
    """Fonction principale"""
    print("üöÄ Script de g√©n√©ration d'indicateurs pour ML")
    
    # R√©cup√©rer la liste des symboles
    try:
        response = requests.get(f"{BASE_URL}/data/symbols")
        response.raise_for_status()
        symbols_data = response.json()
        symbols = [s["symbol"] for s in symbols_data[:10]]  # Limiter √† 10 symboles pour le test
        print(f"üìä {len(symbols)} symboles √† traiter: {', '.join(symbols)}")
        
        # G√©n√©rer les indicateurs
        successful = generate_indicators_for_multiple_symbols(symbols)
        
        print(f"\n‚úÖ Script termin√©: {successful} symboles trait√©s avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    main()
