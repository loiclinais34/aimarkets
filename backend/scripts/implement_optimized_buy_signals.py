#!/usr/bin/env python3
"""
Script pour impl√©menter les optimisations des signaux d'achat
Applique les am√©liorations identifi√©es dans l'analyse des probl√®mes
"""

import asyncio
import logging
import json
from datetime import datetime
from typing import Dict, Any, List, Tuple
import numpy as np
from sqlalchemy.orm import Session
from sqlalchemy import func, and_, or_

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration de la base de donn√©es
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# Import des mod√®les et services
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.core.config import settings
engine = create_engine(settings.database_url)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Import des mod√®les
from app.models.historical_opportunities import HistoricalOpportunities
from app.models.database import HistoricalData


class OptimizedBuySignalsImplementation:
    """
    Impl√©mentation des optimisations des signaux d'achat
    """
    
    def __init__(self, db: Session):
        self.db = db
        self.logger = logging.getLogger(__name__)
    
    def implement_optimized_scoring(self) -> Dict[str, Any]:
        """
        Impl√©mente un syst√®me de scoring optimis√© bas√© sur l'analyse des corr√©lations
        """
        try:
            self.logger.info("üîß Impl√©mentation du scoring optimis√©")
            
            # Nouveaux poids bas√©s sur les corr√©lations identifi√©es
            # Corr√©lations observ√©es:
            # - technical_score: 0.256 (positive)
            # - sentiment_score: 0.359 (positive) 
            # - market_score: -0.438 (n√©gative)
            # - confidence: -0.439 (n√©gative)
            
            optimized_weights = {
                "technical": 0.40,    # Augment√© (corr√©lation positive)
                "sentiment": 0.45,    # Augment√© (meilleure corr√©lation)
                "market": 0.15,       # R√©duit (corr√©lation n√©gative)
                "confidence_penalty": 0.1  # P√©nalit√© pour la sur-confiance
            }
            
            # Nouveaux seuils de d√©cision optimis√©s
            optimized_thresholds = {
                "BUY_STRONG": {
                    "min_composite_score": 0.65,  # Augment√©
                    "min_technical_score": 0.60,  # Augment√©
                    "min_sentiment_score": 0.55,  # Augment√©
                    "max_market_score": 0.40,     # R√©duit (√©viter les march√©s baissiers)
                    "min_confidence": 0.70,       # R√©duit (√©viter la sur-confiance)
                    "max_confidence": 0.85        # Plafonn√©
                },
                "BUY_MODERATE": {
                    "min_composite_score": 0.55,
                    "min_technical_score": 0.50,
                    "min_sentiment_score": 0.45,
                    "max_market_score": 0.45,
                    "min_confidence": 0.65,
                    "max_confidence": 0.90
                },
                "BUY_WEAK": {
                    "min_composite_score": 0.45,
                    "min_technical_score": 0.40,
                    "min_sentiment_score": 0.35,
                    "max_market_score": 0.50,
                    "min_confidence": 0.60,
                    "max_confidence": 0.95
                }
            }
            
            # R√®gles de validation suppl√©mentaires
            additional_validation_rules = {
                "technical_validation": {
                    "rsi_range": [30, 70],  # √âviter les extr√™mes
                    "macd_positive": True,  # MACD au-dessus de la ligne de signal
                    "price_above_sma20": True,  # Prix au-dessus de SMA 20
                    "volume_above_average": True  # Volume sup√©rieur √† la moyenne
                },
                "sentiment_validation": {
                    "score_positive": True,  # Score > 0.5
                    "confidence_adequate": True,  # Confiance entre 0.6 et 0.8
                    "trend_positive": True  # Tendance positive
                },
                "market_validation": {
                    "regime_bullish": True,  # March√© haussier ou lat√©ral
                    "volatility_acceptable": True,  # Volatilit√© < 5%
                    "correlation_positive": True  # Corr√©lations sectorielles positives
                }
            }
            
            return {
                "optimized_weights": optimized_weights,
                "optimized_thresholds": optimized_thresholds,
                "additional_validation_rules": additional_validation_rules,
                "implementation_notes": [
                    "Poids augment√©s pour technical et sentiment (corr√©lations positives)",
                    "Poids r√©duit pour market (corr√©lation n√©gative)",
                    "P√©nalit√© pour la sur-confiance",
                    "Seuils plus stricts pour BUY_STRONG",
                    "Validation technique renforc√©e",
                    "Filtres de qualit√© suppl√©mentaires"
                ]
            }
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'impl√©mentation du scoring: {e}")
            return {"error": str(e)}
    
    def implement_optimized_position_sizing(self) -> Dict[str, Any]:
        """
        Impl√©mente un position sizing optimis√© bas√© sur l'analyse des performances
        """
        try:
            self.logger.info("‚öñÔ∏è Impl√©mentation du position sizing optimis√©")
            
            # Strat√©gie de position sizing optimis√©e
            optimized_sizing_strategy = {
                "base_portfolio_risk": 0.015,  # R√©duit de 2% √† 1.5%
                "max_position_risk": 0.025,    # Maximum 2.5%
                "volatility_adjustment": {
                    "low_volatility": 1.2,     # Multiplicateur pour faible volatilit√©
                    "medium_volatility": 1.0,  # Multiplicateur standard
                    "high_volatility": 0.7     # R√©duction pour haute volatilit√©
                },
                "confidence_adjustment": {
                    "low_confidence": 0.5,     # R√©duction pour faible confiance
                    "medium_confidence": 1.0,  # Standard
                    "high_confidence": 1.3,   # Augmentation pour haute confiance
                    "over_confidence": 0.8     # R√©duction pour sur-confiance
                },
                "score_adjustment": {
                    "technical_weight": 0.4,   # Poids du score technique
                    "sentiment_weight": 0.4,   # Poids du score sentiment
                    "market_weight": 0.2       # Poids du score march√© (r√©duit)
                }
            }
            
            # Formule de calcul optimis√©e
            sizing_formula = {
                "base_size": "portfolio_risk * portfolio_value / current_price",
                "volatility_factor": "volatility_adjustment[volatility_level]",
                "confidence_factor": "confidence_adjustment[confidence_level]",
                "score_factor": "technical_weight * technical_score + sentiment_weight * sentiment_score + market_weight * market_score",
                "final_size": "base_size * volatility_factor * confidence_factor * score_factor"
            }
            
            # R√®gles de protection
            protection_rules = {
                "max_position_size": 0.10,     # Maximum 10% du portefeuille
                "max_correlation_exposure": 0.30,  # Maximum 30% d'exposition corr√©l√©e
                "diversification_minimum": 5,  # Minimum 5 positions
                "stop_loss_level": 0.02,       # Stop-loss √† 2%
                "take_profit_level": 0.04      # Take-profit √† 4%
            }
            
            return {
                "optimized_sizing_strategy": optimized_sizing_strategy,
                "sizing_formula": sizing_formula,
                "protection_rules": protection_rules,
                "implementation_notes": [
                    "Risque de base r√©duit pour plus de prudence",
                    "Ajustements bas√©s sur la volatilit√© et la confiance",
                    "Poids optimis√©s selon les corr√©lations observ√©es",
                    "R√®gles de protection renforc√©es",
                    "Diversification obligatoire"
                ]
            }
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'impl√©mentation du sizing: {e}")
            return {"error": str(e)}
    
    def implement_optimized_take_profit(self) -> Dict[str, Any]:
        """
        Impl√©mente des seuils de take-profit optimis√©s
        """
        try:
            self.logger.info("üéØ Impl√©mentation des take-profits optimis√©s")
            
            # Strat√©gie de take-profit optimis√©e
            optimized_take_profit_strategy = {
                "base_multiplier": 2.5,  # R√©duit de 3x √† 2.5x ATR
                "adaptive_multipliers": {
                    "BUY_STRONG": {
                        "min_multiplier": 2.0,
                        "max_multiplier": 3.5,
                        "score_adjustment": 0.3
                    },
                    "BUY_MODERATE": {
                        "min_multiplier": 1.8,
                        "max_multiplier": 3.0,
                        "score_adjustment": 0.2
                    },
                    "BUY_WEAK": {
                        "min_multiplier": 1.5,
                        "max_multiplier": 2.5,
                        "score_adjustment": 0.1
                    }
                },
                "volatility_adjustment": {
                    "low_volatility": 1.2,    # Augmentation pour faible volatilit√©
                    "medium_volatility": 1.0, # Standard
                    "high_volatility": 0.8    # R√©duction pour haute volatilit√©
                },
                "confidence_adjustment": {
                    "low_confidence": 0.9,    # R√©duction pour faible confiance
                    "medium_confidence": 1.0, # Standard
                    "high_confidence": 1.1,  # L√©g√®re augmentation
                    "over_confidence": 0.8    # R√©duction pour sur-confiance
                }
            }
            
            # R√®gles de sortie dynamiques
            dynamic_exit_rules = {
                "trailing_stop": {
                    "activation_threshold": 0.015,  # Activer √† 1.5% de gain
                    "trailing_distance": 0.01,      # Distance de 1%
                    "min_profit": 0.005             # Profit minimum de 0.5%
                },
                "time_based_exit": {
                    "max_holding_period": 5,        # Maximum 5 jours
                    "profit_target_1d": 0.02,       # Objectif 2% en 1 jour
                    "profit_target_3d": 0.035,      # Objectif 3.5% en 3 jours
                    "profit_target_5d": 0.05        # Objectif 5% en 5 jours
                },
                "volatility_exit": {
                    "high_volatility_threshold": 0.05,  # Volatilit√© > 5%
                    "volatility_exit_multiplier": 0.7   # R√©duction de 30%
                }
            }
            
            return {
                "optimized_take_profit_strategy": optimized_take_profit_strategy,
                "dynamic_exit_rules": dynamic_exit_rules,
                "implementation_notes": [
                    "Multiplicateurs adaptatifs selon le type de signal",
                    "Ajustements bas√©s sur la volatilit√© et la confiance",
                    "R√®gles de sortie dynamiques avec trailing stop",
                    "Sorties bas√©es sur le temps et la volatilit√©",
                    "Objectifs de profit progressifs"
                ]
            }
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'impl√©mentation des take-profits: {e}")
            return {"error": str(e)}
    
    def update_advanced_trading_analysis(self) -> Dict[str, Any]:
        """
        Met √† jour le service AdvancedTradingAnalysis avec les optimisations
        """
        try:
            self.logger.info("üìù Mise √† jour d'AdvancedTradingAnalysis")
            
            # Lire le fichier actuel
            analysis_file = "/Users/loiclinais/Documents/dev/aimarkets/backend/app/services/advanced_analysis/advanced_trading_analysis.py"
            
            with open(analysis_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # G√©n√©rer les nouvelles m√©thodes optimis√©es
            optimized_methods = self._generate_optimized_methods()
            
            # Ins√©rer les nouvelles m√©thodes avant la m√©thode analyze_opportunity
            insertion_point = content.find("    async def analyze_opportunity")
            if insertion_point == -1:
                return {"error": "Point d'insertion non trouv√©"}
            
            # Ins√©rer les nouvelles m√©thodes
            new_content = content[:insertion_point] + optimized_methods + "\n" + content[insertion_point:]
            
            # Sauvegarder le fichier modifi√©
            with open(analysis_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            return {
                "success": True,
                "message": "M√©thodes optimis√©es ajout√©es avec succ√®s",
                "methods_added": [
                    "_calculate_optimized_composite_score",
                    "_determine_optimized_recommendation",
                    "_calculate_optimized_position_size",
                    "_calculate_optimized_take_profit",
                    "_validate_optimized_buy_signals"
                ]
            }
            
        except Exception as e:
            self.logger.error(f"Erreur lors de la mise √† jour: {e}")
            return {"error": str(e)}
    
    def _generate_optimized_methods(self) -> str:
        """G√©n√®re le code des m√©thodes optimis√©es"""
        
        return '''
    def _calculate_optimized_composite_score(self, scores: Dict[str, float]) -> float:
        """
        Calcule le score composite optimis√© bas√© sur les corr√©lations observ√©es
        Optimisations: Augmentation des poids technique et sentiment, r√©duction du poids march√©
        """
        try:
            # Poids optimis√©s bas√©s sur les corr√©lations
            optimized_weights = {
                'technical': 0.40,    # Augment√© (corr√©lation positive 0.256)
                'sentiment': 0.45,    # Augment√© (meilleure corr√©lation 0.359)
                'market': 0.15,       # R√©duit (corr√©lation n√©gative -0.438)
            }
            
            # Score de base
            base_score = (
                optimized_weights['technical'] * scores.get('technical', 0.5) +
                optimized_weights['sentiment'] * scores.get('sentiment', 0.5) +
                optimized_weights['market'] * scores.get('market', 0.5)
            )
            
            # P√©nalit√© pour la sur-confiance (corr√©lation n√©gative -0.439)
            confidence = scores.get('confidence', 0.5)
            if confidence > 0.85:
                confidence_penalty = (confidence - 0.85) * 0.2
                base_score -= confidence_penalty
            
            return max(0.0, min(1.0, base_score))
            
        except Exception as e:
            self.logger.error(f"Erreur calcul score composite optimis√©: {e}")
            return 0.5
    
    def _determine_optimized_recommendation(self, composite_score: float, scores: Dict[str, float]) -> str:
        """
        D√©termine la recommandation optimis√©e avec des seuils plus stricts
        """
        try:
            technical_score = scores.get('technical', 0.5)
            sentiment_score = scores.get('sentiment', 0.5)
            market_score = scores.get('market', 0.5)
            confidence = scores.get('confidence', 0.5)
            
            # Seuils optimis√©s plus stricts
            if (composite_score >= 0.65 and 
                technical_score >= 0.60 and 
                sentiment_score >= 0.55 and 
                market_score <= 0.40 and  # √âviter les march√©s baissiers
                0.70 <= confidence <= 0.85):  # √âviter la sur-confiance
                return "BUY_STRONG"
            
            elif (composite_score >= 0.55 and 
                  technical_score >= 0.50 and 
                  sentiment_score >= 0.45 and 
                  market_score <= 0.45 and 
                  0.65 <= confidence <= 0.90):
                return "BUY_MODERATE"
            
            elif (composite_score >= 0.45 and 
                  technical_score >= 0.40 and 
                  sentiment_score >= 0.35 and 
                  market_score <= 0.50 and 
                  0.60 <= confidence <= 0.95):
                return "BUY_WEAK"
            
            else:
                return "HOLD"
                
        except Exception as e:
            self.logger.error(f"Erreur d√©termination recommandation optimis√©e: {e}")
            return "HOLD"
    
    def _calculate_optimized_position_size(
        self, 
        opportunity_data: Dict[str, Any], 
        portfolio_value: float = 100000
    ) -> Dict[str, Any]:
        """
        Calcule la taille de position optimis√©e bas√©e sur l'analyse des performances
        """
        try:
            symbol = opportunity_data.get('symbol')
            current_price = opportunity_data.get('price_at_generation', 0)
            composite_score = opportunity_data.get('composite_score', 0.5)
            confidence_level = opportunity_data.get('confidence_level', 0.5)
            technical_score = opportunity_data.get('technical_score', 0.5)
            sentiment_score = opportunity_data.get('sentiment_score', 0.5)
            market_score = opportunity_data.get('market_score', 0.5)
            
            if not symbol or current_price <= 0:
                return {"error": "Donn√©es d'opportunit√© incompl√®tes"}
            
            # Param√®tres optimis√©s
            base_portfolio_risk = 0.015  # R√©duit de 2% √† 1.5%
            max_position_risk = 0.025    # Maximum 2.5%
            
            # Taille de base
            base_size = int(portfolio_value * base_portfolio_risk / current_price)
            
            # Ajustements optimis√©s
            # 1. Ajustement volatilit√© (simul√©)
            volatility_factor = 1.0  # √Ä calculer avec les donn√©es r√©elles
            
            # 2. Ajustement confiance (√©viter la sur-confiance)
            if confidence_level < 0.6:
                confidence_factor = 0.5
            elif confidence_level > 0.85:
                confidence_factor = 0.8  # R√©duction pour sur-confiance
            else:
                confidence_factor = 1.0 + (confidence_level - 0.5) * 0.6
            
            # 3. Ajustement score (poids optimis√©s)
            score_factor = (
                0.4 * technical_score + 
                0.4 * sentiment_score + 
                0.2 * market_score
            )
            
            # Taille finale
            final_size = int(base_size * volatility_factor * confidence_factor * score_factor)
            
            # Limites de protection
            max_size = int(portfolio_value * 0.10 / current_price)  # Max 10% du portefeuille
            final_size = min(final_size, max_size)
            final_size = max(1, final_size)  # Minimum 1 action
            
            return {
                "position_size": final_size,
                "position_value": final_size * current_price,
                "position_risk": final_size * current_price * base_portfolio_risk / portfolio_value,
                "volatility_factor": volatility_factor,
                "confidence_factor": confidence_factor,
                "score_factor": score_factor
            }
            
        except Exception as e:
            self.logger.error(f"Erreur calcul position optimis√©e: {e}")
            return {"error": str(e)}
    
    def _calculate_optimized_take_profit(self, opportunity_data: Dict[str, Any]) -> Dict[str, float]:
        """
        Calcule les seuils de take-profit optimis√©s
        """
        try:
            symbol = opportunity_data.get('symbol')
            current_price = opportunity_data.get('price_at_generation', 0)
            composite_score = opportunity_data.get('composite_score', 0.5)
            confidence_level = opportunity_data.get('confidence_level', 0.5)
            recommendation = opportunity_data.get('recommendation', 'HOLD')
            
            if not symbol or current_price <= 0:
                return {"error": "Donn√©es d'opportunit√© incompl√®tes"}
            
            # ATR simul√© (2% du prix)
            atr = current_price * 0.02
            
            # Multiplicateurs optimis√©s par type de recommandation
            if recommendation == "BUY_STRONG":
                base_multiplier = 2.5 + (composite_score - 0.5) * 1.0  # 2.0 √† 3.0
            elif recommendation == "BUY_MODERATE":
                base_multiplier = 2.0 + (composite_score - 0.5) * 0.8  # 1.6 √† 2.4
            elif recommendation == "BUY_WEAK":
                base_multiplier = 1.5 + (composite_score - 0.5) * 0.6  # 1.2 √† 1.8
            else:
                base_multiplier = 2.0
            
            # Ajustement confiance (√©viter la sur-confiance)
            if confidence_level > 0.85:
                confidence_adjustment = 0.8  # R√©duction pour sur-confiance
            else:
                confidence_adjustment = 1.0 + (confidence_level - 0.5) * 0.2
            
            # Multiplicateur final
            final_multiplier = base_multiplier * confidence_adjustment
            
            # Take-profit
            take_profit = current_price * (1 + final_multiplier * atr / current_price)
            
            # Trailing stop
            trailing_stop = current_price * (1 - 0.01)  # 1% de trailing
            
            return {
                "take_profit": take_profit,
                "trailing_stop": trailing_stop,
                "multiplier": final_multiplier,
                "atr": atr
            }
            
        except Exception as e:
            self.logger.error(f"Erreur calcul take-profit optimis√©: {e}")
            return {"error": str(e)}
    
    def _validate_optimized_buy_signals(self, opportunity_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Valide les signaux d'achat avec des r√®gles optimis√©es
        """
        try:
            symbol = opportunity_data.get('symbol')
            technical_score = opportunity_data.get('technical_score', 0.5)
            sentiment_score = opportunity_data.get('sentiment_score', 0.5)
            market_score = opportunity_data.get('market_score', 0.5)
            confidence_level = opportunity_data.get('confidence_level', 0.5)
            
            validations = {
                "technical_valid": False,
                "sentiment_valid": False,
                "market_valid": False,
                "confidence_valid": False,
                "overall_valid": False
            }
            
            # Validation technique renforc√©e
            if (0.4 <= technical_score <= 0.8 and  # √âviter les extr√™mes
                technical_score > 0.5):  # Score positif
                validations["technical_valid"] = True
            
            # Validation sentiment renforc√©e
            if (0.35 <= sentiment_score <= 0.75 and  # √âviter les extr√™mes
                sentiment_score > 0.5):  # Score positif
                validations["sentiment_valid"] = True
            
            # Validation march√© (√©viter les march√©s baissiers)
            if market_score <= 0.5:  # March√© neutre ou haussier
                validations["market_valid"] = True
            
            # Validation confiance (√©viter la sur-confiance)
            if 0.6 <= confidence_level <= 0.85:  # Confiance mod√©r√©e
                validations["confidence_valid"] = True
            
            # Validation globale
            valid_count = sum(1 for v in validations.values() if v and v != "overall_valid")
            validations["overall_valid"] = valid_count >= 3
            
            return {
                "valid": validations["overall_valid"],
                "validations": validations,
                "recommendations": self._generate_validation_recommendations(validations)
            }
            
        except Exception as e:
            self.logger.error(f"Erreur validation optimis√©e: {e}")
            return {"error": str(e)}
    
    def _generate_validation_recommendations(self, validations: Dict[str, bool]) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur les validations"""
        recommendations = []
        
        if not validations.get("technical_valid", False):
            recommendations.append("Score technique insuffisant ou extr√™me")
        
        if not validations.get("sentiment_valid", False):
            recommendations.append("Score sentiment insuffisant ou extr√™me")
        
        if not validations.get("market_valid", False):
            recommendations.append("Conditions de march√© d√©favorables")
        
        if not validations.get("confidence_valid", False):
            recommendations.append("Niveau de confiance inadapt√© (trop faible ou sur-confiance)")
        
        return recommendations
'''
    
    def test_optimized_implementation(self) -> Dict[str, Any]:
        """Teste l'impl√©mentation optimis√©e"""
        try:
            self.logger.info("üß™ Test de l'impl√©mentation optimis√©e")
            
            # R√©cup√©rer quelques opportunit√©s pour tester
            opportunities = self.db.query(HistoricalOpportunities).limit(10).all()
            
            if not opportunities:
                return {"error": "Aucune opportunit√© trouv√©e pour les tests"}
            
            test_results = []
            
            for opp in opportunities:
                # Convertir en dictionnaire
                opp_data = {
                    'symbol': opp.symbol,
                    'composite_score': float(opp.composite_score) if opp.composite_score else 0.5,
                    'confidence_level': float(opp.confidence_level) if opp.confidence_level else 0.5,
                    'technical_score': float(opp.technical_score) if opp.technical_score else 0.5,
                    'sentiment_score': float(opp.sentiment_score) if opp.sentiment_score else 0.5,
                    'market_score': float(opp.market_score) if opp.market_score else 0.5,
                    'price_at_generation': float(opp.price_at_generation) if opp.price_at_generation else 0,
                    'recommendation': opp.recommendation
                }
                
                # Tester les nouvelles m√©thodes
                optimized_composite = self._calculate_optimized_composite_score({
                    'technical': opp_data['technical_score'],
                    'sentiment': opp_data['sentiment_score'],
                    'market': opp_data['market_score'],
                    'confidence': opp_data['confidence_level']
                })
                
                optimized_recommendation = self._determine_optimized_recommendation(
                    optimized_composite, opp_data
                )
                
                optimized_position = self._calculate_optimized_position_size(opp_data)
                optimized_take_profit = self._calculate_optimized_take_profit(opp_data)
                optimized_validation = self._validate_optimized_buy_signals(opp_data)
                
                test_results.append({
                    "symbol": opp.symbol,
                    "original_composite": opp_data['composite_score'],
                    "optimized_composite": optimized_composite,
                    "original_recommendation": opp_data['recommendation'],
                    "optimized_recommendation": optimized_recommendation,
                    "position_calculation": optimized_position,
                    "take_profit_calculation": optimized_take_profit,
                    "validation_result": optimized_validation
                })
            
            return {
                "success": True,
                "test_results": test_results,
                "total_tested": len(test_results)
            }
            
        except Exception as e:
            self.logger.error(f"Erreur lors du test optimis√©: {e}")
            return {"error": str(e)}
    
    def _calculate_optimized_composite_score(self, scores: Dict[str, float]) -> float:
        """M√©thode de test pour le score composite optimis√©"""
        try:
            optimized_weights = {
                'technical': 0.40,
                'sentiment': 0.45,
                'market': 0.15,
            }
            
            base_score = (
                optimized_weights['technical'] * scores.get('technical', 0.5) +
                optimized_weights['sentiment'] * scores.get('sentiment', 0.5) +
                optimized_weights['market'] * scores.get('market', 0.5)
            )
            
            confidence = scores.get('confidence', 0.5)
            if confidence > 0.85:
                confidence_penalty = (confidence - 0.85) * 0.2
                base_score -= confidence_penalty
            
            return max(0.0, min(1.0, base_score))
            
        except Exception as e:
            return 0.5
    
    def _determine_optimized_recommendation(self, composite_score: float, scores: Dict[str, float]) -> str:
        """M√©thode de test pour la recommandation optimis√©e"""
        try:
            technical_score = scores.get('technical_score', 0.5)
            sentiment_score = scores.get('sentiment_score', 0.5)
            market_score = scores.get('market_score', 0.5)
            confidence = scores.get('confidence_level', 0.5)
            
            if (composite_score >= 0.65 and 
                technical_score >= 0.60 and 
                sentiment_score >= 0.55 and 
                market_score <= 0.40 and 
                0.70 <= confidence <= 0.85):
                return "BUY_STRONG"
            elif (composite_score >= 0.55 and 
                  technical_score >= 0.50 and 
                  sentiment_score >= 0.45 and 
                  market_score <= 0.45 and 
                  0.65 <= confidence <= 0.90):
                return "BUY_MODERATE"
            elif (composite_score >= 0.45 and 
                  technical_score >= 0.40 and 
                  sentiment_score >= 0.35 and 
                  market_score <= 0.50 and 
                  0.60 <= confidence <= 0.95):
                return "BUY_WEAK"
            else:
                return "HOLD"
                
        except Exception as e:
            return "HOLD"
    
    def _calculate_optimized_position_size(self, opportunity_data: Dict[str, Any]) -> Dict[str, Any]:
        """M√©thode de test pour le position sizing optimis√©"""
        try:
            current_price = opportunity_data.get('price_at_generation', 0)
            confidence_level = opportunity_data.get('confidence_level', 0.5)
            technical_score = opportunity_data.get('technical_score', 0.5)
            sentiment_score = opportunity_data.get('sentiment_score', 0.5)
            market_score = opportunity_data.get('market_score', 0.5)
            
            if current_price <= 0:
                return {"error": "Prix invalide"}
            
            base_size = int(100000 * 0.015 / current_price)
            
            if confidence_level < 0.6:
                confidence_factor = 0.5
            elif confidence_level > 0.85:
                confidence_factor = 0.8
            else:
                confidence_factor = 1.0 + (confidence_level - 0.5) * 0.6
            
            score_factor = (
                0.4 * technical_score + 
                0.4 * sentiment_score + 
                0.2 * market_score
            )
            
            final_size = int(base_size * confidence_factor * score_factor)
            final_size = min(final_size, int(100000 * 0.10 / current_price))
            final_size = max(1, final_size)
            
            return {
                "position_size": final_size,
                "position_value": final_size * current_price,
                "confidence_factor": confidence_factor,
                "score_factor": score_factor
            }
            
        except Exception as e:
            return {"error": str(e)}
    
    def _calculate_optimized_take_profit(self, opportunity_data: Dict[str, Any]) -> Dict[str, float]:
        """M√©thode de test pour le take-profit optimis√©"""
        try:
            current_price = opportunity_data.get('price_at_generation', 0)
            composite_score = opportunity_data.get('composite_score', 0.5)
            confidence_level = opportunity_data.get('confidence_level', 0.5)
            recommendation = opportunity_data.get('recommendation', 'HOLD')
            
            if current_price <= 0:
                return {"error": "Prix invalide"}
            
            atr = current_price * 0.02
            
            if recommendation == "BUY_STRONG":
                base_multiplier = 2.5 + (composite_score - 0.5) * 1.0
            elif recommendation == "BUY_MODERATE":
                base_multiplier = 2.0 + (composite_score - 0.5) * 0.8
            elif recommendation == "BUY_WEAK":
                base_multiplier = 1.5 + (composite_score - 0.5) * 0.6
            else:
                base_multiplier = 2.0
            
            if confidence_level > 0.85:
                confidence_adjustment = 0.8
            else:
                confidence_adjustment = 1.0 + (confidence_level - 0.5) * 0.2
            
            final_multiplier = base_multiplier * confidence_adjustment
            take_profit = current_price * (1 + final_multiplier * atr / current_price)
            
            return {
                "take_profit": take_profit,
                "multiplier": final_multiplier,
                "atr": atr
            }
            
        except Exception as e:
            return {"error": str(e)}
    
    def _validate_optimized_buy_signals(self, opportunity_data: Dict[str, Any]) -> Dict[str, Any]:
        """M√©thode de test pour la validation optimis√©e"""
        try:
            technical_score = opportunity_data.get('technical_score', 0.5)
            sentiment_score = opportunity_data.get('sentiment_score', 0.5)
            market_score = opportunity_data.get('market_score', 0.5)
            confidence_level = opportunity_data.get('confidence_level', 0.5)
            
            validations = {
                "technical_valid": 0.4 <= technical_score <= 0.8 and technical_score > 0.5,
                "sentiment_valid": 0.35 <= sentiment_score <= 0.75 and sentiment_score > 0.5,
                "market_valid": market_score <= 0.5,
                "confidence_valid": 0.6 <= confidence_level <= 0.85
            }
            
            valid_count = sum(1 for v in validations.values() if v)
            validations["overall_valid"] = valid_count >= 3
            
            return {
                "valid": validations["overall_valid"],
                "validations": validations
            }
            
        except Exception as e:
            return {"error": str(e)}


def main():
    """Fonction principale pour impl√©menter les optimisations des signaux d'achat"""
    logger.info("üöÄ D√©marrage de l'impl√©mentation des optimisations des signaux d'achat")
    
    try:
        # Connexion √† la base de donn√©es
        db = SessionLocal()
        
        # Initialiser l'impl√©mentation
        optimizer = OptimizedBuySignalsImplementation(db)
        
        # Impl√©menter le scoring optimis√©
        logger.info("üîß Impl√©mentation du scoring optimis√©...")
        scoring_result = optimizer.implement_optimized_scoring()
        
        if "error" in scoring_result:
            logger.error(f"‚ùå Erreur lors de l'impl√©mentation du scoring: {scoring_result['error']}")
            return
        
        # Impl√©menter le position sizing optimis√©
        logger.info("‚öñÔ∏è Impl√©mentation du position sizing optimis√©...")
        sizing_result = optimizer.implement_optimized_position_sizing()
        
        if "error" in sizing_result:
            logger.error(f"‚ùå Erreur lors de l'impl√©mentation du sizing: {sizing_result['error']}")
            return
        
        # Impl√©menter les take-profits optimis√©s
        logger.info("üéØ Impl√©mentation des take-profits optimis√©s...")
        take_profit_result = optimizer.implement_optimized_take_profit()
        
        if "error" in take_profit_result:
            logger.error(f"‚ùå Erreur lors de l'impl√©mentation des take-profits: {take_profit_result['error']}")
            return
        
        # Mettre √† jour AdvancedTradingAnalysis
        logger.info("üìù Mise √† jour d'AdvancedTradingAnalysis...")
        update_result = optimizer.update_advanced_trading_analysis()
        
        if "error" in update_result:
            logger.error(f"‚ùå Erreur lors de la mise √† jour: {update_result['error']}")
            return
        
        # Tester l'impl√©mentation
        logger.info("üß™ Test de l'impl√©mentation...")
        test_result = optimizer.test_optimized_implementation()
        
        if "error" in test_result:
            logger.error(f"‚ùå Erreur lors du test: {test_result['error']}")
            return
        
        # Afficher les r√©sultats
        print("\n" + "="*80)
        print("üîß IMPL√âMENTATION DES OPTIMISATIONS DES SIGNAUX D'ACHAT")
        print("="*80)
        
        print(f"\nüìä SCORING OPTIMIS√â:")
        print(f"  ‚Ä¢ Poids technique: 40% (augment√©)")
        print(f"  ‚Ä¢ Poids sentiment: 45% (augment√©)")
        print(f"  ‚Ä¢ Poids march√©: 15% (r√©duit)")
        print(f"  ‚Ä¢ P√©nalit√© sur-confiance: Activ√©e")
        
        print(f"\n‚öñÔ∏è POSITION SIZING OPTIMIS√â:")
        print(f"  ‚Ä¢ Risque de base: 1.5% (r√©duit)")
        print(f"  ‚Ä¢ Ajustements confiance: Optimis√©s")
        print(f"  ‚Ä¢ Ajustements score: Pond√©r√©s")
        print(f"  ‚Ä¢ Protection: Renforc√©e")
        
        print(f"\nüéØ TAKE-PROFITS OPTIMIS√âS:")
        print(f"  ‚Ä¢ Multiplicateurs adaptatifs: Par type de signal")
        print(f"  ‚Ä¢ Ajustements confiance: Anti sur-confiance")
        print(f"  ‚Ä¢ R√®gles de sortie: Dynamiques")
        
        print(f"\n‚úÖ MISE √Ä JOUR D'ADVANCEDTRADINGANALYSIS:")
        print(f"  ‚Ä¢ {update_result['message']}")
        print(f"  ‚Ä¢ M√©thodes ajout√©es: {len(update_result['methods_added'])}")
        
        print(f"\nüß™ R√âSULTATS DES TESTS:")
        print(f"  ‚Ä¢ Opportunit√©s test√©es: {test_result['total_tested']}")
        print(f"  ‚Ä¢ Tests r√©ussis: {test_result['success']}")
        
        # Sauvegarder les r√©sultats
        results = {
            "scoring_result": scoring_result,
            "sizing_result": sizing_result,
            "take_profit_result": take_profit_result,
            "update_result": update_result,
            "test_result": test_result,
            "implementation_timestamp": datetime.now().isoformat()
        }
        
        with open("/Users/loiclinais/Documents/dev/aimarkets/backend/scripts/optimized_buy_signals_implementation.json", "w") as f:
            json.dump(results, f, indent=2, default=str)
        
        logger.info("üìÅ R√©sultats sauvegard√©s dans optimized_buy_signals_implementation.json")
        logger.info("‚úÖ Impl√©mentation des optimisations termin√©e avec succ√®s")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'impl√©mentation: {e}")
        return


if __name__ == "__main__":
    main()
